diff --git a/rosen/modules/render_service_base/BUILD.gn b/rosen/modules/render_service_base/BUILD.gn
index 1fd41aea0de624d0d46650074b7a48741f2608e1..5930ef6fb9fddc75503cd3531ace415f0d75a1df 100644
--- a/rosen/modules/render_service_base/BUILD.gn
+++ b/rosen/modules/render_service_base/BUILD.gn
@@ -859,6 +859,8 @@ ohos_shared_library("librender_service_base") {
     ]
   }
 
+  external_deps += [ "hilog:libhilog" ]
+
   if (rs_enable_gpu) {
     public_external_deps += [ "openssl:libcrypto_shared" ]
   }
@@ -888,6 +890,8 @@ ohos_source_set("librender_service_base_static") {
     "src/platform:platform",
   ]
 
+  external_deps = [ "hilog:libhilog" ]
+
   public_external_deps = []
   if (rosen_is_ohos) {
     public_external_deps += [
diff --git a/rosen/modules/render_service_base/include/pipeline/rs_render_node.h b/rosen/modules/render_service_base/include/pipeline/rs_render_node.h
index dec7c33c6b6c76c5f707ecbf75a9c37ca138e55c..fb8af866697d3aa4ea11b25b5aeac14940154990 100755
--- a/rosen/modules/render_service_base/include/pipeline/rs_render_node.h
+++ b/rosen/modules/render_service_base/include/pipeline/rs_render_node.h
@@ -1478,7 +1478,7 @@ private:
 // backward compatibility
 using RSBaseRenderNode = RSRenderNode;
 
-struct SharedTransitionParam {
+struct RSB_EXPORT SharedTransitionParam {
     SharedTransitionParam(RSRenderNode::SharedPtr inNode, RSRenderNode::SharedPtr outNode, bool isInSameWindow);
 
     RSRenderNode::SharedPtr GetPairedNode(const NodeId nodeId) const;
diff --git a/rosen/modules/render_service_profiler/rs_profiler.cpp b/rosen/modules/render_service_profiler/rs_profiler.cpp
index 2751c74e0ccec7dd3199921be7deac062574d117..11feb9916339fc2c6860486bafb8fdf09d9dfb72 100644
--- a/rosen/modules/render_service_profiler/rs_profiler.cpp
+++ b/rosen/modules/render_service_profiler/rs_profiler.cpp
@@ -1004,8 +1004,10 @@ void RSProfiler::HiddenSpaceTurnOn()
         HRPE("RSProfiler::HiddenSpaceTurnOn Logical Display is nullptr");
         return;
     }
+
     if (auto rootNode = GetRenderNode(Utils::PatchNodeId(0))) {
         g_childOfDisplayNodes = *logicalDisplayNode->GetChildren();
+
         logicalDisplayNode->ClearChildren();
         logicalDisplayNode->AddChild(rootNode);
     }
@@ -1020,6 +1022,7 @@ std::shared_ptr<RSRenderNode> RSProfiler::GetLogicalDisplay()
     if (rootRenderNode == nullptr) {
         return nullptr;
     }
+
     const auto& children = *rootRenderNode->GetChildren();
     if (children.empty()) {
         return nullptr;
diff --git a/rosen/modules/render_service_profiler/rs_profiler_dump.cpp b/rosen/modules/render_service_profiler/rs_profiler_dump.cpp
index 80ecf0a5843ae11f09e41efe904456cee1978240..c5b5da523985a591a325ed55f28ae47d4a8045ca 100644
--- a/rosen/modules/render_service_profiler/rs_profiler_dump.cpp
+++ b/rosen/modules/render_service_profiler/rs_profiler_dump.cpp
@@ -52,12 +52,12 @@ void RSProfiler::DumpNode(const RSRenderNode& node, JsonWriter& out, bool clearM
 
     if (!isSorted) {
         for (auto& child : node.GetChildrenList()) {
-            if (child.lock()) {
-                DumpNode(*child.lock(), children, clearMockFlag, false, isSorted);
+            if (auto lockedChild = child.lock(); lockedChild) {
+                DumpNode(*lockedChild, children, clearMockFlag, false, isSorted);
             }
         }
-    } else if (node.GetSortedChildren()) {
-        for (auto& child : *node.GetSortedChildren()) {
+    } else if (auto sortedChildren = node.GetSortedChildren()) {
+        for (auto& child : *sortedChildren) {
             if (child) {
                 DumpNode(*child, children, clearMockFlag, false, isSorted);
             }
@@ -168,7 +168,6 @@ void RSProfiler::DumpNodeBaseInfo(const RSRenderNode& node, JsonWriter& out, boo
         out["nodeGroupReuseCache"] = renderParams ? static_cast<int>(!renderParams->GetNeedUpdateCache()) : 0;
     }
     if (node.GetUifirstRootNodeId() != INVALID_NODEID) {
-        out["uifirstRootNodeId"] = node.GetUifirstRootNodeId();
         out["uifirstRootNodeId"] = AdjustNodeId(node.GetUifirstRootNodeId(), clearMockFlag);
     }
     DumpNodeSubClassNode(node, out);
@@ -513,7 +512,7 @@ void RSProfiler::DumpNodePropertiesDecoration(const RSProperties& properties, Js
     if (properties.pixelStretch_.has_value()) {
         auto& pixelStretch = out["PixelStretch"];
         pixelStretch.PushObject();
-        pixelStretch["left"] = properties.pixelStretch_->z_;
+        pixelStretch["left"] = properties.pixelStretch_->x_;
         pixelStretch["top"] = properties.pixelStretch_->y_;
         pixelStretch["right"] = properties.pixelStretch_->z_;
         pixelStretch["bottom"] = properties.pixelStretch_->w_;
diff --git a/rosen/modules/render_service_profiler/rs_profiler_log.h b/rosen/modules/render_service_profiler/rs_profiler_log.h
index 663e417ccc9e4adbcd6b9eab39b5a65fab46d7eb..a1b9961fbd7ab83296bcd582e5101e5781fba91b 100755
--- a/rosen/modules/render_service_profiler/rs_profiler_log.h
+++ b/rosen/modules/render_service_profiler/rs_profiler_log.h
@@ -23,8 +23,10 @@
 #define HRPD(format, ...) RS_LOGD("[HRP] " format, ##__VA_ARGS__)
 #define HRPE(format, ...) RS_LOGE("[HRP] " format, ##__VA_ARGS__)
 #define HRPW(format, ...) RS_LOGW("[HRP] " format, ##__VA_ARGS__)
+// LCOV_EXCL_START
 #define HRPIDN(format, ...) ((CONDITION(DEBUG_NODE)) ? RS_LOGI("[HRP] " format, ##__VA_ARGS__) : (void)0)
 #define HRPIDM(format, ...) ((CONDITION(DEBUG_MODIFIER)) ? RS_LOGI("[HRP] " format, ##__VA_ARGS__) : (void)0)
-// NOLINTEND
+// LCOV_EXCL_STOP
+//  NOLINTEND
 
 #endif // RS_PROFILER_LOG_H
\ No newline at end of file
diff --git a/rosen/modules/render_service_profiler/rs_profiler_pixelmap.cpp b/rosen/modules/render_service_profiler/rs_profiler_pixelmap.cpp
index e1e5fa382fd0abdef10066b5282b3165de4a943e..fb2cb38b046d595efe627df85ed5cd3055d40b34 100644
--- a/rosen/modules/render_service_profiler/rs_profiler_pixelmap.cpp
+++ b/rosen/modules/render_service_profiler/rs_profiler_pixelmap.cpp
@@ -132,15 +132,16 @@ bool PixelMapStorage::Push(uint64_t id, const ImageInfo& info, const PixelMemInf
     if (!Fits(static_cast<size_t>(memory.bufferSize))) {
         return false;
     }
+    auto ret = true;
 
     if (IsSharedMemory(memory)) {
-        PushSharedMemory(id, info, memory, skipBytes);
+        ret = PushSharedMemory(id, info, memory, skipBytes);
     } else if (IsDmaMemory(memory)) {
-        PushDmaMemory(id, info, memory, skipBytes);
+        ret = PushDmaMemory(id, info, memory, skipBytes);
     } else {
-        PushHeapMemory(id, info, memory, skipBytes);
+        ret = PushHeapMemory(id, info, memory, skipBytes);
     }
-    return true;
+    return ret;
 }
 
 bool PixelMapStorage::PullSharedMemory(uint64_t id, const ImageInfo& info, PixelMemInfo& memory, size_t& skipBytes)
@@ -172,25 +173,27 @@ bool PixelMapStorage::PullSharedMemory(uint64_t id, const ImageInfo& info, Pixel
     return true;
 }
 
-void PixelMapStorage::PushSharedMemory(uint64_t id, const ImageInfo& info, const PixelMemInfo& memory, size_t skipBytes)
+bool PixelMapStorage::PushSharedMemory(uint64_t id, const ImageInfo& info, const PixelMemInfo& memory, size_t skipBytes)
 {
     ImageProperties properties(info, AllocatorType::SHARE_MEM_ALLOC);
-    PushImage(id, GenerateImageData(0, info, memory), skipBytes, nullptr, &properties);
+    return PushImage(id, GenerateImageData(0, info, memory), skipBytes, nullptr, &properties);
 }
 
-void PixelMapStorage::PushSharedMemory(uint64_t id, PixelMap& map)
+bool PixelMapStorage::PushSharedMemory(uint64_t id, PixelMap& map)
 {
     if (!map.GetFd()) {
-        return;
+        return false;
     }
 
     constexpr size_t skipBytes = 24u;
     const auto size = static_cast<size_t>(map.GetByteCount());
     const ImageProperties properties(map);
     if (auto image = MapImage(*reinterpret_cast<const int32_t*>(map.GetFd()), size, PROT_READ)) {
-        PushImage(id, GenerateImageData(0, image, size, map), skipBytes, nullptr, &properties);
+        auto ret = PushImage(id, GenerateImageData(0, image, size, map), skipBytes, nullptr, &properties);
         UnmapImage(image, size);
+        return ret;
     }
+    return false;
 }
 
 bool PixelMapStorage::PullDmaMemory(uint64_t id, const ImageInfo& info, PixelMemInfo& memory, size_t& skipBytes)
@@ -229,7 +232,7 @@ bool PixelMapStorage::PullDmaMemory(uint64_t id, const ImageInfo& info, PixelMem
     return true;
 }
 
-void PixelMapStorage::PushDmaMemory(uint64_t id, const ImageInfo& info, const PixelMemInfo& memory, size_t skipBytes)
+bool PixelMapStorage::PushDmaMemory(uint64_t id, const ImageInfo& info, const PixelMemInfo& memory, size_t skipBytes)
 {
     auto surfaceBuffer = reinterpret_cast<SurfaceBuffer*>(memory.context);
     auto buffer = surfaceBuffer ? surfaceBuffer->GetBufferHandle() : nullptr;
@@ -237,35 +240,36 @@ void PixelMapStorage::PushDmaMemory(uint64_t id, const ImageInfo& info, const Pi
         const auto pixels = GenerateImageData(id, reinterpret_cast<const uint8_t*>(surfaceBuffer->GetVirAddr()),
             buffer->size, memory.isAstc, GetBytesPerPixel(info));
         ImageProperties properties(info, AllocatorType::DMA_ALLOC);
-        PushImage(id, pixels, skipBytes, buffer, &properties);
+        return PushImage(id, pixels, skipBytes, buffer, &properties);
     }
+    return false;
 }
 
-void PixelMapStorage::PushDmaMemory(uint64_t id, PixelMap& map)
+bool PixelMapStorage::PushDmaMemory(uint64_t id, PixelMap& map)
 {
     const auto surfaceBuffer = reinterpret_cast<SurfaceBuffer*>(map.GetFd());
     const auto buffer = surfaceBuffer ? surfaceBuffer->GetBufferHandle() : nullptr;
     if (!buffer) {
-        return;
+        return false;
     }
     const ImageProperties properties(map);
     const auto pixels =
         GenerateImageData(id, reinterpret_cast<const uint8_t*>(surfaceBuffer->GetVirAddr()), buffer->size, map);
     MessageParcel parcel;
     surfaceBuffer->WriteToMessageParcel(parcel);
-    PushImage(id, pixels, parcel.GetReadableBytes(), buffer, &properties);
+    return PushImage(id, pixels, parcel.GetReadableBytes(), buffer, &properties);
 }
 
-void PixelMapStorage::PushHeapMemory(uint64_t id, const ImageInfo& info, const PixelMemInfo& memory, size_t skipBytes)
+bool PixelMapStorage::PushHeapMemory(uint64_t id, const ImageInfo& info, const PixelMemInfo& memory, size_t skipBytes)
 {
     ImageProperties properties(info, AllocatorType::HEAP_ALLOC);
-    PushImage(id, GenerateImageData(0, info, memory), skipBytes, nullptr, &properties);
+    return PushImage(id, GenerateImageData(0, info, memory), skipBytes, nullptr, &properties);
 }
 
-void PixelMapStorage::PushHeapMemory(uint64_t id, PixelMap& map)
+bool PixelMapStorage::PushHeapMemory(uint64_t id, PixelMap& map)
 {
     if (!map.GetFd()) {
-        return;
+        return false;
     }
 
     constexpr size_t skipBytes = 24u;
@@ -274,8 +278,9 @@ void PixelMapStorage::PushHeapMemory(uint64_t id, PixelMap& map)
     const uint8_t *base = map.GetPixels();
     if (base && baseSize) {
         const auto pixels = GenerateImageData(0, base, baseSize, map);
-        PushImage(id, pixels, skipBytes, nullptr, &properties);
+        return PushImage(id, pixels, skipBytes, nullptr, &properties);
     }
+    return false;
 }
 
 bool PixelMapStorage::PullHeapMemory(uint64_t id, const ImageInfo& info, PixelMemInfo& memory, size_t& skipBytes)
@@ -377,11 +382,11 @@ void PixelMapStorage::ExtractAlpha(const ImageData& image, ImageData& alpha, con
     }
 }
 
-void PixelMapStorage::PushImage(
+bool PixelMapStorage::PushImage(
     uint64_t id, const ImageData& data, size_t skipBytes, BufferHandle* buffer, const ImageProperties* properties)
 {
     if (data.empty() || (buffer && ((buffer->width == 0) || (buffer->height == 0)))) {
-        return;
+        return false;
     }
 
     Image image;
@@ -434,7 +439,7 @@ void PixelMapStorage::PushImage(
         image.data = data;
     }
 
-    ImageCache::Add(id, std::move(image));
+    return ImageCache::Add(id, std::move(image));
 }
 
 EncodedType PixelMapStorage::TryEncodeTexture(const ImageProperties* properties, const ImageData& data, Image& image)
diff --git a/rosen/modules/render_service_profiler/rs_profiler_pixelmap.h b/rosen/modules/render_service_profiler/rs_profiler_pixelmap.h
index bbeeaccf3dbb8659554d450f8e28d07d3687a778..889432419079cceb9d8447068df47d10ffa1e360 100644
--- a/rosen/modules/render_service_profiler/rs_profiler_pixelmap.h
+++ b/rosen/modules/render_service_profiler/rs_profiler_pixelmap.h
@@ -16,6 +16,7 @@
 #ifndef HRP_PIXELMAP_H
 #define HRP_PIXELMAP_H
 
+#include "common/rs_macros.h"
 namespace OHOS::Rosen {
 
 using OHOS::sptr;
@@ -73,7 +74,7 @@ enum class EncodedType : int {
     XLZ4 = 2,
 };
 
-class PixelMapStorage final {
+class RSB_EXPORT PixelMapStorage final {
 public:
     static bool Pull(uint64_t id, const ImageInfo& info, PixelMemInfo& memory, size_t& skipBytes);
     static bool Push(uint64_t id, const ImageInfo& info, const PixelMemInfo& memory, size_t skipBytes);
@@ -84,15 +85,15 @@ private:
     static bool Fits(size_t size);
 
     static bool PullSharedMemory(uint64_t id, const ImageInfo& info, PixelMemInfo& memory, size_t& skipBytes);
-    static void PushSharedMemory(uint64_t id, const ImageInfo& info, const PixelMemInfo& memory, size_t skipBytes);
-    static void PushSharedMemory(uint64_t id, PixelMap& map);
+    static bool PushSharedMemory(uint64_t id, const ImageInfo& info, const PixelMemInfo& memory, size_t skipBytes);
+    static bool PushSharedMemory(uint64_t id, PixelMap& map);
 
     static bool PullDmaMemory(uint64_t id, const ImageInfo& info, PixelMemInfo& memory, size_t& skipBytes);
-    static void PushDmaMemory(uint64_t id, const ImageInfo& info, const PixelMemInfo& memory, size_t skipBytes);
-    static void PushDmaMemory(uint64_t id, PixelMap& map);
+    static bool PushDmaMemory(uint64_t id, const ImageInfo& info, const PixelMemInfo& memory, size_t skipBytes);
+    static bool PushDmaMemory(uint64_t id, PixelMap& map);
 
-    static void PushImage(uint64_t id, const ImageData& data, size_t skipBytes,
-        BufferHandle* buffer = nullptr, const ImageProperties* properties = nullptr);
+    static bool PushImage(uint64_t id, const ImageData& data, size_t skipBytes, BufferHandle* buffer = nullptr,
+        const ImageProperties* properties = nullptr);
 
     static bool IsSharedMemory(const PixelMap& map);
     static bool IsSharedMemory(const PixelMemInfo& memory);
@@ -102,8 +103,8 @@ private:
     static bool IsDmaMemory(AllocatorType type);
 
     static bool PullHeapMemory(uint64_t id, const ImageInfo& info, PixelMemInfo& memory, size_t& skipBytes);
-    static void PushHeapMemory(uint64_t id, const ImageInfo& info, const PixelMemInfo& memory, size_t skipBytes);
-    static void PushHeapMemory(uint64_t id, PixelMap& map);
+    static bool PushHeapMemory(uint64_t id, const ImageInfo& info, const PixelMemInfo& memory, size_t skipBytes);
+    static bool PushHeapMemory(uint64_t id, PixelMap& map);
 
     static bool DefaultHeapMemory(uint64_t id, const ImageInfo& info, PixelMemInfo& memory, size_t& skipBytes);
 
diff --git a/rosen/modules/render_service_profiler/rs_profiler_test_tree.cpp b/rosen/modules/render_service_profiler/rs_profiler_test_tree.cpp
index 246d4f240abd7ceccb9acc10a57ca1f468a68f9f..cadb4d6ff63e20f399131716d18b1ee353d3f02e 100644
--- a/rosen/modules/render_service_profiler/rs_profiler_test_tree.cpp
+++ b/rosen/modules/render_service_profiler/rs_profiler_test_tree.cpp
@@ -25,6 +25,7 @@
 #include "rs_profiler_file.h"
 #include "rs_profiler_log.h"
 #include "rs_profiler_settings.h"
+#include "rs_profiler_utils.h"
 
 #include "command/rs_base_node_command.h"
 #include "command/rs_canvas_drawing_node_command.h"
@@ -44,11 +45,12 @@
 #include "image/image.h"
 #include "modifier/rs_modifier_type.h"
 #include "modifier/rs_render_modifier.h"
-#include "pipeline/render_thread/rs_uni_render_util.h"
 #include "pipeline/main_thread/rs_main_thread.h"
+#include "pipeline/main_thread/rs_render_service_connection.h"
+#include "pipeline/render_thread/rs_uni_render_util.h"
 #include "pipeline/rs_render_node.h"
 #include "pipeline/rs_render_node_gc.h"
-#include "pipeline/main_thread/rs_render_service_connection.h"
+#include "pipeline/rs_screen_render_node.h"
 #include "platform/common/rs_log.h"
 #include "render/rs_typeface_cache.h"
 #include "transaction/rs_marshalling_helper.h"
@@ -84,14 +86,34 @@ Drawing::Image TestTreeBuilder::GenerateRandomImage(int width, int height)
     return image;
 }
 
-TestTreeBuilder::TestTreeBuilder() : mt_(std::random_device()()), insideId_(0), withDisplay_(false) {}
+TestTreeBuilder::TestTreeBuilder()
+    : mt_(std::random_device()()), insideId_(0), withDisplay_(false), withScreenNode_(false),
+      withPatchedGlobalRoot_(false)
+{}
 
 void TestTreeBuilder::CreateNode00(RSContext& context, std::vector<std::shared_ptr<RSRenderNode>>& tree)
 {
     // DISPLAY or ROOT node +0
+    NodeId screenNodeId = insideId_++;
     NodeId currentId = insideId_++;
     if (withDisplay_) {
-        const auto displayNodeConfig = RSDisplayNodeConfig();
+        if (withPatchedGlobalRoot_) {
+            RootNodeCommandHelper::Create(context, Utils::PatchNodeId(0));
+        }
+        if (withScreenNode_) {
+            auto node = std::make_shared<RSScreenRenderNode>(screenNodeId, screenNodeId, context.weak_from_this());
+            context.GetMutableNodeMap().RegisterRenderNode(node);
+
+            if (withPatchedGlobalRoot_) {
+                BaseNodeCommandHelper::AddChild(context, Utils::PatchNodeId(0), screenNodeId, 0);
+            } else {
+                context.GetGlobalRootRenderNode()->AddChild(node);
+            }
+
+            HRPIDN("BuildTestTree: Builded Render Screen node wit id: %" PRIu64, screenNodeId);
+        }
+        RSDisplayNodeConfig displayNodeConfig {};
+        displayNodeConfig.screenId = screenNodeId;
         DisplayNodeCommandHelper::Create(context, currentId, displayNodeConfig);
 
         HRPIDN("BuildTestTree: Builded Display node wit id: %" PRIu64, currentId);
@@ -372,7 +394,8 @@ void TestTreeBuilder::CreateNode08(RSContext& context, std::vector<std::shared_p
     HRPIDN("BuildTestTree: Builded Canvas node wit id: %" PRIu64, currentId);
 }
 
-std::vector<std::shared_ptr<RSRenderNode>> TestTreeBuilder::Build(RSContext& context, NodeId topId, bool withDisplay)
+std::vector<std::shared_ptr<RSRenderNode>> TestTreeBuilder::Build(
+    RSContext& context, NodeId topId, bool withDisplay, bool withScreenNode, bool withPatchedGlobalRoot)
 {
     using OHOS::Rosen::DisplayNodeCommandHelper;
     using OHOS::Rosen::EffectNodeCommandHelper;
@@ -382,6 +405,8 @@ std::vector<std::shared_ptr<RSRenderNode>> TestTreeBuilder::Build(RSContext& con
     std::vector<std::shared_ptr<RSRenderNode>> tree;
     insideId_ = topId;
     withDisplay_ = withDisplay;
+    withScreenNode_ = withScreenNode;
+    withPatchedGlobalRoot_ = withPatchedGlobalRoot;
 
     /* graph structure of tree:
 
diff --git a/rosen/modules/render_service_profiler/rs_profiler_test_tree.h b/rosen/modules/render_service_profiler/rs_profiler_test_tree.h
index ab9cffb76ba9c8b4260428e495daeee23134f268..62827cff49c6cd2b82138badb0209ac139eceed2 100644
--- a/rosen/modules/render_service_profiler/rs_profiler_test_tree.h
+++ b/rosen/modules/render_service_profiler/rs_profiler_test_tree.h
@@ -27,7 +27,8 @@ namespace OHOS::Rosen {
 class TestTreeBuilder {
 public:
     TestTreeBuilder();
-    std::vector<std::shared_ptr<RSRenderNode>> Build(RSContext& context, NodeId topId, bool withDisplay);
+    std::vector<std::shared_ptr<RSRenderNode>> Build(RSContext& context, NodeId topId, bool withDisplay,
+        bool withScreenNode = false, bool withPatchedGlobalRoot = false);
 
 private:
     inline static const int startX = 200;
@@ -51,6 +52,8 @@ private:
     Drawing::Image GenerateRandomImage(int width, int height);
     NodeId insideId_;
     bool withDisplay_;
+    bool withScreenNode_;
+    bool withPatchedGlobalRoot_;
     void CreateNode00(RSContext& context, std::vector<std::shared_ptr<RSRenderNode>>& tree);
     void CreateNode01(RSContext& context, std::vector<std::shared_ptr<RSRenderNode>>& tree);
     void CreateNode02(RSContext& context, std::vector<std::shared_ptr<RSRenderNode>>& tree);
diff --git a/rosen/test/render_service/render_service_profiler/unittest/BUILD.gn b/rosen/test/render_service/render_service_profiler/unittest/BUILD.gn
index c523eef1879df34da5368207c2d29138c9eb5783..308b1de326e0b5dfc6ce6b2cd94da23dc965e47c 100644
--- a/rosen/test/render_service/render_service_profiler/unittest/BUILD.gn
+++ b/rosen/test/render_service/render_service_profiler/unittest/BUILD.gn
@@ -21,20 +21,25 @@ group("unittest") {
     ":RSProfilerArchiveTest",
     ":RSProfilerBaseTest",
     ":RSProfilerCaptureDataTest",
+    ":RSProfilerCapturingTest",
+    ":RSProfilerCommandTest",
+    ":RSProfilerDumpTest",
+    ":RSProfilerNetworkTest",
     ":RSProfilerPacketTest",
+    ":RSProfilerPixelMapTest",
     ":RSProfilerSocketTest",
+    ":RSProfilerTelemetryTest",
+    ":RSProfilerTest",
     ":RSProfilerUtilsTest",
-    ":RSProfilerCapturingTest",
-    "standard:test",
+    ":subtest",
   ]
 }
 
-group("test") {
+group("subtest") {
   testonly = true
   deps = [
-    "reliability/platform/ohos:unittest",
-    "standard/platform/ohos:unittest",
-    "standard/transaction:unittest",
+    "reliability:unittest",
+    "standard:unittest",
   ]
 }
 
@@ -68,7 +73,6 @@ ohos_unittest("RSProfilerArchiveTest") {
     "c_utils:utils",
     "eventhandler:libeventhandler",
     "hilog:libhilog",
-    "init:libbegetutil",
   ]
 
   subsystem_name = "graphic"
@@ -141,7 +145,6 @@ ohos_unittest("RSProfilerCaptureDataTest") {
     "c_utils:utils",
     "eventhandler:libeventhandler",
     "hilog:libhilog",
-    "init:libbegetutil",
   ]
 
   subsystem_name = "graphic"
@@ -173,7 +176,6 @@ ohos_unittest("RSProfilerNetworkTest") {
     "c_utils:utils",
     "eventhandler:libeventhandler",
     "hilog:libhilog",
-    "init:libbegetutil",
   ]
 
   subsystem_name = "graphic"
@@ -205,7 +207,6 @@ ohos_unittest("RSProfilerPacketTest") {
     "c_utils:utils",
     "eventhandler:libeventhandler",
     "hilog:libhilog",
-    "init:libbegetutil",
   ]
 
   subsystem_name = "graphic"
@@ -237,7 +238,6 @@ ohos_unittest("RSProfilerSocketTest") {
     "c_utils:utils",
     "eventhandler:libeventhandler",
     "hilog:libhilog",
-    "init:libbegetutil",
   ]
 
   use_exceptions = true
@@ -271,7 +271,6 @@ ohos_unittest("RSProfilerTest") {
     "c_utils:utils",
     "eventhandler:libeventhandler",
     "hilog:libhilog",
-    "init:libbegetutil",
     "samgr:samgr_proxy",
   ]
 
@@ -296,23 +295,12 @@ ohos_unittest("RSProfilerTelemetryTest") {
     "$graphic_2d_root/rosen/modules/render_service_base:export_config",
   ]
 
-  cflags = [
-    "--coverage"
-  ]
-
-  ldflags = [
-  "--coverage",
-  ]
-
   deps = [
     "$graphic_2d_root/rosen/modules/render_service:librender_service",
     "$graphic_2d_root/rosen/modules/render_service_base:librender_service_base",
   ]
 
-  external_deps = [
-    "c_utils:utils",
-    "init:libbegetutil",
-  ]
+  external_deps = [ "c_utils:utils" ]
 
   use_exceptions = true
   subsystem_name = "graphic"
@@ -339,7 +327,6 @@ ohos_unittest("RSProfilerUtilsTest") {
     "c_utils:utils",
     "eventhandler:libeventhandler",
     "hilog:libhilog",
-    "init:libbegetutil",
   ]
 
   subsystem_name = "graphic"
@@ -366,13 +353,78 @@ ohos_unittest("RSProfilerCommandTest") {
     "c_utils:utils",
     "eventhandler:libeventhandler",
     "hilog:libhilog",
-    "init:libbegetutil",
   ]
 
   subsystem_name = "graphic"
   part_name = "graphic_2d"
 }
 
+##############################  RSProfilerDumpTest  ##################################
+ohos_unittest("RSProfilerDumpTest") {
+  module_out_path = module_output_path
+
+  defines = [ "RS_PROFILER_ENABLED" ]
+  sources = [ "rs_profiler_dump_test.cpp" ]
+
+  configs = [
+    ":render_test",
+    "$graphic_2d_root/rosen/modules/2d_graphics:export_config",
+    "$graphic_2d_root/rosen/modules/render_service_base:export_config",
+    "$graphic_2d_root/rosen/modules/render_service_client:render_service_client_config",
+  ]
+
+  cflags = [
+    "-Dprivate=public",
+    "-Dprotected=public",
+  ]
+  deps = [
+    "$graphic_2d_root/rosen/modules/render_service:librender_service",
+    "$graphic_2d_root/rosen/modules/render_service_base:librender_service_base",
+    "$graphic_2d_root/rosen/modules/render_service_client:render_service_client_src",
+  ]
+
+  include_dirs = [ "$graphic_2d_root/rosen/modules/render_service_client" ]
+
+  external_deps = [ "c_utils:utils" ]
+
+  subsystem_name = "graphic"
+  part_name = "graphic_2d"
+}
+
+##############################  RSProfilerPixelMapTest  ##################################
+ohos_unittest("RSProfilerPixelMapTest") {
+  module_out_path = module_output_path
+
+  defines = [ "RS_PROFILER_ENABLED" ]
+  sources = [ "rs_profiler_pixelmap_test.cpp" ]
+
+  configs = [
+    ":render_test",
+    "$graphic_2d_root/rosen/modules/render_service_base:export_config",
+    "$graphic_2d_root/rosen/modules/render_service_client:render_service_client_config",
+  ]
+
+  cflags = [
+    "-Dprivate=public",
+    "-Dprotected=public",
+  ]
+  deps = [
+    "$graphic_2d_root/rosen/modules/render_service:librender_service",
+    "$graphic_2d_root/rosen/modules/render_service_base:librender_service_base",
+  ]
+
+  external_deps = [
+    "c_utils:utils",  # sptr
+    "graphic_surface:surface",  # SurfaceBuffer
+    "image_framework:image_native",  # ImageInfo, PIXEL_MAP_ERR, PixelMap,
+                                     # PixelMapInfo, AllocatorType
+    "init:libbegetutil",  # system parameters
+  ]
+ 
+  subsystem_name = "graphic"
+  part_name = "graphic_2d"
+}
+
 ############################# RSProfilerCapturingTest #################################
 ohos_unittest("RSProfilerCapturingTest") {
   module_out_path = module_output_path
diff --git a/rosen/test/render_service/render_service_profiler/unittest/reliability/BUILD.gn b/rosen/test/render_service/render_service_profiler/unittest/reliability/BUILD.gn
new file mode 100644
index 0000000000000000000000000000000000000000..b7bd1a7477ebd81c66750373cd9df378c30eb228
--- /dev/null
+++ b/rosen/test/render_service/render_service_profiler/unittest/reliability/BUILD.gn
@@ -0,0 +1,24 @@
+# Copyright (c) 2025 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/test.gni")
+import("//foundation/graphic/graphic_2d/graphic_config.gni")
+import("$graphic_2d_root/rosen/modules/render_service_base/config.gni")
+
+group("unittest") {
+  testonly = true
+
+  deps = [
+    "transaction:unittest",
+  ]
+}
diff --git a/rosen/test/render_service/render_service_profiler/unittest/reliability/platform/ohos/BUILD.gn b/rosen/test/render_service/render_service_profiler/unittest/reliability/transaction/BUILD.gn
similarity index 87%
rename from rosen/test/render_service/render_service_profiler/unittest/reliability/platform/ohos/BUILD.gn
rename to rosen/test/render_service/render_service_profiler/unittest/reliability/transaction/BUILD.gn
index def0b97ba8016883010a52505e481125eaa38b52..b91b2a4ed3dd0edd6bf2895a403cca0caa757cc2 100644
--- a/rosen/test/render_service/render_service_profiler/unittest/reliability/platform/ohos/BUILD.gn
+++ b/rosen/test/render_service/render_service_profiler/unittest/reliability/transaction/BUILD.gn
@@ -14,14 +14,14 @@
 import("//build/test.gni")
 import("//foundation/graphic/graphic_2d/ace_platforms.gni")
 import("//foundation/graphic/graphic_2d/graphic_config.gni")
-import("../../reliability.gni")
+import("../reliability.gni")
 
-module_output_path = "graphic_2d/graphic_2d/rosen/modules/render_service_profiler/reliability/platform/ohos"
+module_output_path = "graphic_2d/graphic_2d/rosen/modules/render_service_profiler/reliability/transaction"
 
 ##############################  RSMarshallingHelperReliabilityTest  ##################################
 ohos_unittest("RSMarshallingHelperReliabilityTest") {
   module_out_path = module_output_path
-  defines = []
+  defines = [ "RS_PROFILER_ENABLED" ]
   sources = [ "rs_marshalling_helper_test.cpp" ]
 
   cflags = [
@@ -33,6 +33,7 @@ ohos_unittest("RSMarshallingHelperReliabilityTest") {
     ":render_test",
     "$reliability_root/utils:test_utils_config",
     "$graphic_2d_root/rosen/modules/render_service_base:export_config",
+    "$graphic_2d_root/rosen/modules/2d_graphics:export_config",
   ]
 
   include_dirs = [
@@ -45,6 +46,7 @@ ohos_unittest("RSMarshallingHelperReliabilityTest") {
     "$graphic_2d_root/prebuilts/librarys/gpu/include",
     "$graphic_2d_root/rosen/modules/render_service_client/core",
     "$graphic_2d_root/utils/log",
+    "$graphic_2d_root/rosen/modules/render_service_profiler",
   ]
 
   deps = [
@@ -59,6 +61,15 @@ ohos_unittest("RSMarshallingHelperReliabilityTest") {
     "skia:skia_canvaskit",
   ]
 
+  if (defined(use_rosen_drawing) && use_rosen_drawing) {
+    defines += [ "USE_ROSEN_DRAWING" ]
+    if (rs_enable_gpu) {
+      defines += [ "RS_ENABLE_GPU" ]
+    }
+
+    deps += [ "$graphic_2d_root/rosen/modules/2d_graphics:2d_graphics" ]
+  }
+
   if (defined(input_ext_feature_magiccursor) && input_ext_feature_magiccursor) {
     defines = [ "OHOS_BUILD_ENABLE_MAGICCURSOR" ]
   }
diff --git a/rosen/test/render_service/render_service_profiler/unittest/reliability/platform/ohos/rs_marshalling_helper_test.cpp b/rosen/test/render_service/render_service_profiler/unittest/reliability/transaction/rs_marshalling_helper_test.cpp
similarity index 69%
rename from rosen/test/render_service/render_service_profiler/unittest/reliability/platform/ohos/rs_marshalling_helper_test.cpp
rename to rosen/test/render_service/render_service_profiler/unittest/reliability/transaction/rs_marshalling_helper_test.cpp
index 7ad966dc0e8aff338ad5f01c21a7fcd4c90c09a8..9ef903c03e8b1cd528ed225be57fd150e6003d33 100644
--- a/rosen/test/render_service/render_service_profiler/unittest/reliability/platform/ohos/rs_marshalling_helper_test.cpp
+++ b/rosen/test/render_service/render_service_profiler/unittest/reliability/transaction/rs_marshalling_helper_test.cpp
@@ -17,54 +17,15 @@
 #include <gtest/gtest.h>
 #include <memory>
 
-#include "memory/rs_memory_track.h"
 #include "gtest/hwext/gtest-tag.h"
 #include "parameters.h"
-#include "recording/record_cmd.h"
 #include "render_service_profiler/rs_profiler.h"
-#include "render_service_profiler/rs_profiler_settings.h"
+#include "rs_profiler.h"
 #include "test_utils.h"
 
-#include "animation/rs_particle_noise_field.h"
-#include "animation/rs_render_curve_animation.h"
-#include "animation/rs_render_interpolating_spring_animation.h"
-#include "animation/rs_render_keyframe_animation.h"
-#include "animation/rs_render_particle.h"
-#include "animation/rs_render_particle_animation.h"
-#include "animation/rs_render_path_animation.h"
-#include "animation/rs_render_spring_animation.h"
-#include "animation/rs_render_transition.h"
-#include "common/rs_color.h"
-#include "common/rs_common_def.h"
-#include "common/rs_matrix3.h"
-#include "common/rs_vector4.h"
-#include "modifier/rs_render_modifier.h"
-#include "pipeline/rs_draw_cmd.h"
-#include "platform/common/rs_log.h"
-#include "platform/common/rs_system_properties.h"
-#include "render/rs_blur_filter.h"
-#include "render/rs_filter.h"
-#include "render/rs_gradient_blur_para.h"
-#include "render/rs_image.h"
-#include "render/rs_image_base.h"
-#include "render/rs_light_up_effect_filter.h"
-#include "render/rs_mask.h"
-#include "render/rs_material_filter.h"
-#include "render/rs_motion_blur_filter.h"
-#include "render/rs_path.h"
-#include "render/rs_pixel_map_shader.h"
-#include "render/rs_shader.h"
-#include "transaction/rs_ashmem_helper.h"
 #include "transaction/rs_marshalling_helper.h"
 #include "utils/data.h"
 
-#ifdef ROSEN_OHOS
-#include "buffer_utils.h"
-#endif
-#include "recording/mask_cmd_list.h"
-
-#include "property/rs_properties_def.h"
-
 using namespace testing;
 using namespace testing::ext;
 
@@ -99,7 +60,7 @@ void RSMarshallingHelperReliabilityTest::TearDown() {}
  * @tc.type:FUNC
  * @tc.require:
  */
-HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithSmallDataWithoutProfiler, Level1 | Reliability)
+HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithSmallDataWithoutProfiler, TestSize.Level1 | Reliability)
 {
     OHOS::system::SetParameter("persist.graphic.profiler.enabled", "0");
     // data should be std::shared_ptr<Drawing::Data>
@@ -110,7 +71,7 @@ HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithSmallDataWithoutProf
 
     void* allocated = malloc(length);
     EXPECT_TRUE(data->BuildFromMalloc(allocated, length));
-    
+
     EXPECT_TRUE(CheckConsistencyWithData(data, position));
 }
 
@@ -120,7 +81,7 @@ HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithSmallDataWithoutProf
  * @tc.type:FUNC
  * @tc.require:
  */
-HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithMediumDataWithoutProfiler, Level1 | Reliability)
+HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithMediumDataWithoutProfiler, TestSize.Level1 | Reliability)
 {
     OHOS::system::SetParameter("persist.graphic.profiler.enabled", "0");
     // data should be std::shared_ptr<Drawing::Data>
@@ -141,7 +102,7 @@ HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithMediumDataWithoutPro
  * @tc.type:FUNC
  * @tc.require:
  */
-HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithSmallPixelMapWithoutProfiler, Level1 | Reliability)
+HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithSmallPixelMapWithoutProfiler, TestSize.Level1 | Reliability)
 {
     OHOS::system::SetParameter("persist.graphic.profiler.enabled", "0");
 
@@ -149,7 +110,7 @@ HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithSmallPixelMapWithout
     options.size.width = 1;
     options.size.height = 1;
     options.pixelFormat = Media::PixelFormat::RGBA_8888;
-    const size_t position = 84;
+    const size_t position = 92;
     const size_t pixelMapSize = 80;
 
     std::shared_ptr pixelMap = Media::PixelMap::Create(options);
@@ -163,7 +124,8 @@ HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithSmallPixelMapWithout
  * @tc.type:FUNC
  * @tc.require:
  */
-HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithMediumPixelMapWithoutProfiler, Level1 | Reliability)
+HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithMediumPixelMapWithoutProfiler,
+    TestSize.Level1 | Reliability)
 {
     OHOS::system::SetParameter("persist.graphic.profiler.enabled", "0");
 
@@ -171,7 +133,7 @@ HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithMediumPixelMapWithou
     options.size.width = 860;
     options.size.height = 520;
     options.pixelFormat = Media::PixelFormat::RGBA_8888;
-    const size_t position = 84;
+    const size_t position = 92;
     const size_t pixelMapSize = 80;
 
     std::shared_ptr pixelMap = Media::PixelMap::Create(options);
@@ -185,7 +147,8 @@ HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithMediumPixelMapWithou
  * @tc.type:FUNC
  * @tc.require:
  */
-HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithBigPixelMapWithoutProfiler, Level1 | Reliability)
+HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithBigPixelMapWithoutProfiler,
+    TestSize.Level1 | Reliability)
 {
     OHOS::system::SetParameter("persist.graphic.profiler.enabled", "0");
 
@@ -193,7 +156,7 @@ HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithBigPixelMapWithoutPr
     options.size.width = 2123;
     options.size.height = 1987;
     options.pixelFormat = Media::PixelFormat::RGBA_8888;
-    const size_t position = 84;
+    const size_t position = 92;
     const size_t pixelMapSize = 80;
 
     std::shared_ptr pixelMap = Media::PixelMap::Create(options);
@@ -201,14 +164,13 @@ HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithBigPixelMapWithoutPr
     EXPECT_TRUE(CheckConsistencyWithPixelMap(pixelMap, position, pixelMapSize));
 }
 
-
 /**
  * @tc.name: ConsistencyWithSmallDataWithProfiler
  * @tc.desc: Verify function marshal, unmarshal and skip is consistent.
  * @tc.type:FUNC
  * @tc.require:
  */
-HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithSmallDataWithProfiler, Level1 | Reliability)
+HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithSmallDataWithProfiler, TestSize.Level1 | Reliability)
 {
     OHOS::system::SetParameter("persist.graphic.profiler.enabled", "1");
     // data should be std::shared_ptr<Drawing::Data>
@@ -219,17 +181,17 @@ HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithSmallDataWithProfile
 
     void* allocated = malloc(length);
     EXPECT_TRUE(data->BuildFromMalloc(allocated, length));
-    
+
     EXPECT_TRUE(CheckConsistencyWithData(data, position));
 }
- 
+
 /**
  * @tc.name: ConsistencyWithMediumDataWithProfiler
  * @tc.desc: Verify function marshal, unmarshal and skip is consistent.
  * @tc.type:FUNC
  * @tc.require:
  */
-HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithMediumDataWithProfiler, Level1 | Reliability)
+HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithMediumDataWithProfiler, TestSize.Level1 | Reliability)
 {
     OHOS::system::SetParameter("persist.graphic.profiler.enabled", "1");
     Parcel parcel;
@@ -241,7 +203,7 @@ HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithMediumDataWithProfil
 
     void* allocated = malloc(length);
     EXPECT_TRUE(data->BuildFromMalloc(allocated, length));
-    
+
     EXPECT_TRUE(CheckConsistencyWithData(data, position));
 }
 
@@ -251,7 +213,7 @@ HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithMediumDataWithProfil
  * @tc.type:FUNC
  * @tc.require:
  */
-HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithSmallPixelMapWithProfiler, Level1 | Reliability)
+HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithSmallPixelMapWithProfiler, TestSize.Level1 | Reliability)
 {
     OHOS::system::SetParameter("persist.graphic.profiler.enabled", "1");
 
@@ -259,7 +221,7 @@ HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithSmallPixelMapWithPro
     options.size.width = 1;
     options.size.height = 1;
     options.pixelFormat = Media::PixelFormat::RGBA_8888;
-    const size_t position = 92;
+    const size_t position = 100;
     const size_t pixelMapSize = 88;
 
     std::shared_ptr pixelMap = Media::PixelMap::Create(options);
@@ -273,7 +235,7 @@ HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithSmallPixelMapWithPro
  * @tc.type:FUNC
  * @tc.require:
  */
-HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithMediumPixelMapWithProfiler, Level1 | Reliability)
+HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithMediumPixelMapWithProfiler, TestSize.Level1 | Reliability)
 {
     OHOS::system::SetParameter("persist.graphic.profiler.enabled", "1");
 
@@ -281,7 +243,7 @@ HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithMediumPixelMapWithPr
     options.size.width = 860;
     options.size.height = 520;
     options.pixelFormat = Media::PixelFormat::RGBA_8888;
-    const size_t position = 92;
+    const size_t position = 100;
     const size_t pixelMapSize = 88;
 
     std::shared_ptr pixelMap = Media::PixelMap::Create(options);
@@ -295,7 +257,7 @@ HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithMediumPixelMapWithPr
  * @tc.type:FUNC
  * @tc.require:
  */
-HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithBigPixelMapWithProfiler, Level1 | Reliability)
+HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithBigPixelMapWithProfiler, TestSize.Level1 | Reliability)
 {
     OHOS::system::SetParameter("persist.graphic.profiler.enabled", "1");
 
@@ -303,7 +265,7 @@ HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithBigPixelMapWithProfi
     options.size.width = 2123;
     options.size.height = 1987;
     options.pixelFormat = Media::PixelFormat::RGBA_8888;
-    const size_t position = 92;
+    const size_t position = 100;
     const size_t pixelMapSize = 88;
 
     std::shared_ptr pixelMap = Media::PixelMap::Create(options);
@@ -311,5 +273,129 @@ HWTEST_F(RSMarshallingHelperReliabilityTest, ConsistencyWithBigPixelMapWithProfi
     EXPECT_TRUE(CheckConsistencyWithPixelMap(pixelMap, position, pixelMapSize));
 }
 
+HWTEST(RSMarshallingHelperTest, UnmarshallingEmpty, TestSize.Level1)
+{
+    Parcel parcel;
+    uint64_t val = 0;
+    bool ret = RSMarshallingHelper::UnmarshallingPidPlusId(parcel, val);
+    EXPECT_FALSE(ret);
+    EXPECT_EQ(val, 0);
+}
+
+HWTEST(RSMarshallingHelperTest, UnmarshallingPidPlusId0, TestSize.Level1)
+{
+    Parcel parcel;
+    uint64_t val = 0;
+    parcel.WriteUint64(val);
+    val = 42;
+    bool ret = RSMarshallingHelper::UnmarshallingPidPlusId(parcel, val);
+    EXPECT_TRUE(ret);
+    EXPECT_EQ(val, 0);
+}
+
+HWTEST(RSMarshallingHelperTest, UnmarshallingPidPlusId, TestSize.Level1)
+{
+    Parcel parcel;
+    uint64_t val = 42;
+    parcel.WriteUint64(val);
+    val = 0;
+    bool ret = RSMarshallingHelper::UnmarshallingPidPlusId(parcel, val);
+    EXPECT_TRUE(ret);
+    EXPECT_EQ(val, 42);
+}
+
+HWTEST(RSMarshallingHelperTest, UnmarshallingPidPlusIdNoChangeIfZero0, TestSize.Level1)
+{
+    Parcel parcel;
+    uint64_t val = 0;
+    parcel.WriteUint64(val);
+    val = 42;
+    bool ret = RSMarshallingHelper::UnmarshallingPidPlusIdNoChangeIfZero(parcel, val);
+    EXPECT_TRUE(ret);
+    EXPECT_EQ(val, 0);
+}
+
+HWTEST(RSMarshallingHelperTest, UnmarshallingPidPlusIdNoChangeIfZero, TestSize.Level1)
+{
+    Parcel parcel;
+    uint64_t val = 42;
+    parcel.WriteUint64(val);
+    val = 0;
+    bool ret = RSMarshallingHelper::UnmarshallingPidPlusIdNoChangeIfZero(parcel, val);
+    EXPECT_TRUE(ret);
+    EXPECT_EQ(val, 42);
+}
+
+class RSMarshallingHelperMockParcelTest : public testing::Test {
+public:
+    static void SetUpTestCase()
+    {
+        RSProfiler::testing_ = true;
+        RSProfiler::SetMode(Mode::READ);
+    }
+
+    static void TearDownTestCase()
+    {
+        RSProfiler::testing_ = false;
+        RSProfiler::SetMode(Mode::NONE);
+    }
+
+    void SetUp() override
+    {
+        parcel = new (parcelMemory + 1) Parcel;
+    }
+
+    void TearDown() override
+    {
+        parcel->~Parcel();
+    }
+
+private:
+    Parcel* parcel;
+    uint8_t parcelMemory[sizeof(Parcel) + 1];
+
+    static constexpr const uint64_t Flag = 1ull << 62u;
+};
+
+HWTEST_F(RSMarshallingHelperMockParcelTest, UnmarshallingPidPlusId0, TestSize.Level1)
+{
+    uint64_t val = 0;
+    parcel->WriteUint64(val);
+    val = 42;
+    bool ret = RSMarshallingHelper::UnmarshallingPidPlusId(*parcel, val);
+    EXPECT_TRUE(ret);
+    EXPECT_EQ(val, Flag | 0);
+}
+
+HWTEST_F(RSMarshallingHelperMockParcelTest, UnmarshallingPidPlusId, TestSize.Level1)
+{
+    uint64_t val = 42;
+    parcel->WriteUint64(val);
+    val = 0;
+    bool ret = RSMarshallingHelper::UnmarshallingPidPlusId(*parcel, val);
+    EXPECT_TRUE(ret);
+    EXPECT_EQ(val, Flag | 42);
+}
+
+HWTEST_F(RSMarshallingHelperMockParcelTest, UnmarshallingPidPlusIdNoChangeIfZero0, TestSize.Level1)
+{
+    uint64_t val = 0;
+    parcel->WriteUint64(val);
+    val = 42;
+    bool ret = RSMarshallingHelper::UnmarshallingPidPlusIdNoChangeIfZero(*parcel, val);
+    EXPECT_TRUE(ret);
+    EXPECT_EQ(val, 0);
+}
+
+HWTEST_F(RSMarshallingHelperMockParcelTest, UnmarshallingPidPlusIdNoChangeIfZero, TestSize.Level1)
+{
+    uint64_t val = 42;
+    parcel->WriteUint64(val);
+    val = 0;
+    bool ret = RSMarshallingHelper::UnmarshallingPidPlusIdNoChangeIfZero(*parcel, val);
+    EXPECT_TRUE(ret);
+    EXPECT_EQ(val, Flag | 42);
+}
+
 } // namespace Rosen
-} // namespace OHOS
\ No newline at end of file
+} // namespace OHOS
diff --git a/rosen/test/render_service/render_service_profiler/unittest/rs_profiler_archive_test.cpp b/rosen/test/render_service/render_service_profiler/unittest/rs_profiler_archive_test.cpp
index 337176bf74859ae9143082c3f34c9c9cb679144e..23b4cef62a95a0576e8b8204ad157908413f3446 100644
--- a/rosen/test/render_service/render_service_profiler/unittest/rs_profiler_archive_test.cpp
+++ b/rosen/test/render_service/render_service_profiler/unittest/rs_profiler_archive_test.cpp
@@ -45,7 +45,7 @@ HWTEST_F(RSProfilerArchiveTest, SerializeCharTest, testing::ext::TestSize.Level1
     reader.Serialize(result);
     EXPECT_EQ(initial, result);
 }
- 
+
 /*
  * @tc.name: SerializeFloatTest
  * @tc.desc: Test Archive float serialization
@@ -136,7 +136,6 @@ HWTEST_F(RSProfilerArchiveTest, SerializeUInt8Test, testing::ext::TestSize.Level
     EXPECT_EQ(initial, result);
 }
 
-
 /*
  * @tc.name: SerializeUint32Test
  * @tc.desc: Test Archive uint32_t serialization
@@ -248,4 +247,39 @@ HWTEST_F(RSProfilerArchiveTest, SerializeVectorCustomSerializerTest, testing::ex
     EXPECT_EQ(initial, result);
 }
 
+HWTEST_F(RSProfilerArchiveTest, SerializeInt16, testing::ext::TestSize.Level1)
+{
+    std::vector<char> buf;
+    DataWriter writer(buf);
+    DataReader reader(buf);
+    int16_t v1 = 0xb00d;
+    uint16_t v2 = 0xdeec;
+
+    writer.Serialize(v1);
+    writer.Serialize(v2);
+    int16_t res1 { 0 };
+    uint16_t res2 { 0 };
+    reader.Serialize(res1);
+    reader.Serialize(res2);
+    EXPECT_EQ(v1, res1);
+    EXPECT_EQ(v2, res2);
+}
+
+HWTEST_F(RSProfilerArchiveTest, SerializeVoid, testing::ext::TestSize.Level1)
+{
+    std::vector<char> buf;
+    DataWriter writer(buf);
+    EXPECT_TRUE(buf.empty());
+    writer.Serialize(nullptr, 100);
+    EXPECT_TRUE(buf.empty());
+
+    int placeholder;
+    void* addr = &placeholder;
+    writer.Serialize(addr, 0);
+    EXPECT_TRUE(buf.empty());
+
+    writer.Serialize(nullptr, 0); // both
+    EXPECT_TRUE(buf.empty());
+}
+
 } // namespace OHOS::Rosen
\ No newline at end of file
diff --git a/rosen/test/render_service/render_service_profiler/unittest/rs_profiler_dump_test.cpp b/rosen/test/render_service/render_service_profiler/unittest/rs_profiler_dump_test.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..bdd276b22093ed8901968335f1e0fd32367ee32f
--- /dev/null
+++ b/rosen/test/render_service/render_service_profiler/unittest/rs_profiler_dump_test.cpp
@@ -0,0 +1,785 @@
+/*
+ * Copyright (c) 2025 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <memory>
+#include <ostream>
+
+#include "gtest/gtest.h"
+#include "gtest/hwext/gtest-ext.h"
+#include "gtest/hwext/gtest-tag.h"
+#include "recording/draw_cmd_list.h"
+#include "rs_profiler.h"
+#include "rs_profiler_json.h"
+#include "rs_profiler_log.h"
+
+#include "animation/rs_animation_manager.h"
+#include "common/rs_color.h"
+#include "common/rs_vector4.h"
+#include "effect/rs_render_filter_base.h"
+#include "modifier/rs_modifier_type.h"
+#include "modifier/rs_property.h"
+#include "modifier/rs_property_modifier.h"
+#include "modifier_ng/appearance/rs_hdr_brightness_render_modifier.h"
+#include "modifier_ng/foreground/rs_env_foreground_color_render_modifier.h"
+#include "modifier_ng/geometry/rs_frame_clip_render_modifier.h"
+#include "modifier_ng/rs_render_modifier_ng.h"
+#include "pipeline/rs_context.h"
+#include "pipeline/rs_logical_display_render_node.h"
+#include "pipeline/rs_render_node.h"
+#include "pipeline/rs_root_render_node.h"
+#include "property/rs_properties.h"
+#include "property/rs_properties_def.h"
+
+using namespace testing;
+using namespace testing::ext;
+
+namespace OHOS::Rosen {
+
+HWTEST(RSProfilerDumpTest, DumpOffScreen, TestSize.Level1)
+{
+    const NodeId nodeId = 42;
+    RSRenderNode node(nodeId);
+    JsonWriter out;
+    RSContext context;
+    RSProfiler::DumpOffscreen(context, out, false, 0);
+    std::string expected {
+        "{\"type\":\"OFF_SCREEN\",\"children\":[{\"type\":\"RS_NODE\",\"id\":0,\"instanceRootNodeId\":0,"
+        "\"firstLevelNodeId\":0,\"subclass\":{},\"Properties\":{\"Bounds\":[null,null,null,null],"
+        "\"Frame\":[null,null,null,null]},\"IsPureContainer\":1,\"DrawCmdModifiers\":[],\"children\":[]}]}"
+    };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpEmptyNode, TestSize.Level1)
+{
+    const NodeId nodeId = 42;
+    RSRenderNode node(nodeId);
+    JsonWriter out;
+    RSProfiler::DumpNode(node, out, false, false, false);
+    std::string expected {
+        "{\"type\":\"RS_NODE\",\"id\":42,\"instanceRootNodeId\":0,\"firstLevelNodeId\":0,"
+        "\"subclass\":{},\"Properties\":{\"Bounds\":[null,null,null,null],\"Frame\":[null,null,null,null]},"
+        "\"IsPureContainer\":1,\"DrawCmdModifiers\":[],\"children\":[]}"
+    };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpEmptyNodeAsRoot, TestSize.Level1)
+{
+    JsonWriter out;
+
+    const NodeId nodeId = 42;
+    RSRenderNode node(nodeId);
+    const bool clearMockFlag = false;
+    const bool absRoot = true;
+    const bool isSorted = false;
+    RSProfiler::DumpNode(node, out, clearMockFlag, absRoot, isSorted);
+    std::string expected {
+        "{\"type\":\"RS_NODE\",\"id\":42,\"instanceRootNodeId\":0,\"firstLevelNodeId\":0,"
+        "\"subclass\":{},\"Properties\":{\"Bounds\":[null,null,null,null],\"Frame\":[null,null,null,null]"
+        ",\"ScaleX\":1,\"ScaleY\":1},"
+        "\"IsPureContainer\":1,\"DrawCmdModifiers\":[],\"children\":[]}"
+    };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodeWithChildren, TestSize.Level1)
+{
+    JsonWriter out;
+
+    const NodeId nodeId = 42;
+    auto node = std::make_shared<RSRenderNode>(nodeId);
+    EXPECT_TRUE(node->GetIsFullChildrenListValid());
+    auto child1 = std::make_shared<RSRenderNode>(1);
+    auto child2 = std::make_shared<RSRenderNode>(2);
+    node->AddChild(child1);
+    EXPECT_FALSE(node->GetIsFullChildrenListValid());
+    node->AddChild(child2);
+    EXPECT_FALSE(node->GetIsFullChildrenListValid());
+    // Child Node disappeared because no strong links after call
+    node->AddChild(std::make_shared<RSRenderNode>(3));
+    EXPECT_EQ(node->GetChildrenCount(), 3); // But weak link will be saved
+
+    const bool clearMockFlag = false;
+    const bool absRoot = true;
+    const bool isSorted = false;
+    EXPECT_FALSE(node->GetIsFullChildrenListValid());
+    RSProfiler::DumpNode(*node, out, clearMockFlag, absRoot, isSorted);
+    std::string expected {
+        "{\"type\":\"RS_NODE\",\"id\":42,\"instanceRootNodeId\":0,\"firstLevelNodeId\":0,\"subclass\":{},"
+        "\"Properties\":{\"Bounds\":[null,null,null,null],\"Frame\":[null,null,null,null],\"ScaleX\":1,\"ScaleY\":1},"
+        "\"isNodeDirty\":1,\"IsPureContainer\":1,\"DrawCmdModifiers\":[],\"children update\":{\"current "
+        "count\":0,\"expected "
+        "count\":\"0\"},\"children\":[{\"type\":\"RS_NODE\",\"id\":1,\"instanceRootNodeId\":0,\"firstLevelNodeId\":0,"
+        "\"subclass\":{},\"Properties\":{\"Bounds\":[null,null,null,null],\"Frame\":[null,null,null,null]},"
+        "\"IsPureContainer\":1,\"DrawCmdModifiers\":[],\"children\":[]},{\"type\":\"RS_NODE\",\"id\":2,"
+        "\"instanceRootNodeId\":0,\"firstLevelNodeId\":0,\"subclass\":{},\"Properties\":{\"Bounds\":[null,null,null,"
+        "null],\"Frame\":[null,null,null,null]},\"IsPureContainer\":1,\"DrawCmdModifiers\":[],\"children\":[]}]}"
+    };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodeWithChildrenSorted, Level1)
+{
+    JsonWriter out;
+
+    const NodeId nodeId = 42;
+    auto node = std::make_shared<RSRenderNode>(nodeId);
+    auto child1 = std::make_shared<RSRenderNode>(1);
+    child1->GetMutableRenderProperties().SetPositionZ(0.2);
+    auto child2 = std::make_shared<RSRenderNode>(2);
+    child2->GetMutableRenderProperties().SetPositionZ(0.1);
+    node->AddChild(child1);
+    node->AddChild(child2);
+    node->GenerateFullChildrenList();
+
+    const bool clearMockFlag = false;
+    const bool absRoot = true;
+    const bool isSorted = true;
+
+    RSProfiler::DumpNode(*node, out, clearMockFlag, absRoot, isSorted);
+    std::string expected {
+        "{\"type\":\"RS_NODE\",\"id\":42,\"instanceRootNodeId\":0,\"firstLevelNodeId\":0,\"subclass\":{},"
+        "\"Properties\":{\"Bounds\":[null,null,null,null],\"Frame\":[null,null,null,null],\"ScaleX\":1,\"ScaleY\":1},"
+        "\"isNodeDirty\":1,\"IsPureContainer\":1,\"DrawCmdModifiers\":[],\"children\":[{\"type\":\"RS_NODE\",\"id\":2,"
+        "\"instanceRootNodeId\":0,\"firstLevelNodeId\":0,\"subclass\":{},\"Properties\":{"
+        "\"Bounds\":[null,null,null,null],\"Frame\":[null,null,null,null],\"PositionZ\":0.1},"
+        "\"isPropertyDirty\":1,\"IsPureContainer\":1,"
+        "\"DrawCmdModifiers\":[],\"children\":[]},{\"type\":\"RS_NODE\",\"id\":1,\"instanceRootNodeId\":0,"
+        "\"firstLevelNodeId\":0,\"subclass\":{},\"Properties\":{\"Bounds\":[null,null,null,null],"
+        "\"Frame\":[null,null,null,null],\"PositionZ\":0.2},\"isPropertyDirty\":1,\"IsPureContainer\":1,"
+        "\"DrawCmdModifiers\":[],\"children\":[]}]}"
+    };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, AdjustNodeId, TestSize.Level1)
+{
+    const NodeId simple = 420;
+    const NodeId mask = (NodeId(1) << (30 + 32));
+    const NodeId masked = simple | mask;
+    const bool clearMockFlag = true;
+
+    EXPECT_EQ(RSProfiler::AdjustNodeId(simple, false), simple);
+    EXPECT_EQ(RSProfiler::AdjustNodeId(masked, false), masked);
+    EXPECT_EQ(RSProfiler::AdjustNodeId(simple, clearMockFlag), simple);
+    EXPECT_EQ(RSProfiler::AdjustNodeId(masked, clearMockFlag), simple);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodeAbsoluteProperties, TestSize.Level1)
+{
+    JsonWriter out;
+    NodeId nodeId = 42;
+    auto upperNode = std::make_shared<RSRenderNode>(nodeId++);
+    upperNode->GetMutableRenderProperties().SetScale({ 3.14, 2.7 });                // Unused in node
+    upperNode->GetMutableRenderProperties().SetBounds({ 5000, 15, 10100, 20200 });  // Unused in node
+    upperNode->GetMutableRenderProperties().SetFrame({ 33000, 44000, 5500, 6600 }); // Unused in node
+
+    auto screenNode = std::make_shared<RSScreenRenderNode>(1, 1);
+    screenNode->GetMutableRenderProperties().SetScale({ 2, 3 });
+    screenNode->GetMutableRenderProperties().SetBounds({ 1, 2, 101, 202 });          // used only x, y
+    screenNode->GetMutableRenderProperties().SetFrame({ 33000, 44000, 5500, 6600 }); // Unused in node
+    upperNode->AddChild(screenNode);
+
+    auto parent = std::make_shared<RSRenderNode>(nodeId++);
+    parent->GetMutableRenderProperties().SetScale({ 5, 7 });
+    parent->GetMutableRenderProperties().SetBounds({ 10, 20, 101, 202 });
+    parent->GetMutableRenderProperties().SetFrame({ 33, 44, 55, 66 }); // Unused in node
+    screenNode->AddChild(parent);
+    auto node = std::make_shared<RSRenderNode>(nodeId++);
+    node->GetMutableRenderProperties().SetScale({ 11, 13 });
+    node->GetMutableRenderProperties().SetBounds({ 100, 200, 123, 234 });
+    node->GetMutableRenderProperties().SetFrame({ 30, 40, 50, 60 });
+    parent->AddChild(node);
+
+    auto saved_parent = node->GetParent().lock();
+    EXPECT_EQ(saved_parent, parent);
+
+    RSProfiler::DumpNodeAbsoluteProperties(*node, out);
+
+    std::string expected { "\"Properties\":{\"Bounds\":[111,222,123,234],\"Frame\":[30,40,50,60],"
+                           "\"ScaleX\":110,\"ScaleY\":273}" };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+
+    JsonWriter out2;
+    auto invisible = std::make_shared<RSRenderNode>(nodeId++);
+    invisible->GetMutableRenderProperties().SetScale({ 0.1, 0.1 });
+    invisible->GetMutableRenderProperties().SetBounds({ 0, 0, 345, 456 });
+    invisible->GetMutableRenderProperties().SetFrame({ 31, 41, 51, 61 });
+    invisible->GetMutableRenderProperties().SetVisible(false);
+    node->AddChild(invisible);
+
+    RSProfiler::DumpNodeAbsoluteProperties(*invisible, out2);
+
+    std::string expected2 { "\"Properties\":{\"Bounds\":[111,222,345,456],\"Frame\":[31,41,51,61],"
+                            "\"IsVisible\":0,\"ScaleX\":11,\"ScaleY\":27.3}" };
+    expected2.append(1, '\0');
+    EXPECT_EQ(out2.GetDumpString(), expected2);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodeBaseInfo, TestSize.Level1)
+{
+    JsonWriter out;
+    NodeId nodeId = 142;
+    auto rootNode = std::make_shared<RSRenderNode>(nodeId++);
+    auto node = std::make_shared<RSRenderNode>(nodeId++);
+    rootNode->AddChild(node);
+
+    auto inNode = std::make_shared<RSRenderNode>(nodeId++);
+    auto outNode = std::make_shared<RSRenderNode>(nodeId++);
+
+    auto sharedTransitionParam = std::make_shared<SharedTransitionParam>(inNode, outNode, true);
+    node->SetSharedTransitionParam(sharedTransitionParam);
+
+    node->MarkNodeGroup(RSRenderNode::GROUPED_BY_ANIM, true, false);
+    node->UpdateTreeUifirstRootNodeId(rootNode->GetId());
+
+    RSProfiler::DumpNodeBaseInfo(*node, out, false);
+    std::string expected { "\"type\":\"RS_NODE\",\"id\":143,\"instanceRootNodeId\":0,\"firstLevelNodeId\":0,"
+                           "\"SharedTransitionParam\":\"144 -> 145\",\"nodeGroup\":1,\"nodeGroupReuseCache\":0,"
+                           "\"uifirstRootNodeId\":142,\"subclass\":{}" };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodeSubsurfaces, TestSize.Level1)
+{
+    JsonWriter out;
+    NodeId nodeId = 142;
+    auto node = std::make_shared<RSSurfaceRenderNode>(nodeId++);
+    auto subsurface1 = std::make_shared<RSSurfaceRenderNode>(nodeId++);
+    auto subsurface2 = std::make_shared<RSSurfaceRenderNode>(nodeId++);
+    node->UpdateChildSubSurfaceNodes(subsurface1, true);
+    node->UpdateChildSubSurfaceNodes(subsurface2, true);
+
+    RSProfiler::DumpNodeSubsurfaces(*node, out);
+    std::string expected { "\"subsurface\":[143,144]" };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodeSubsurfacesSurface, TestSize.Level1)
+{
+    JsonWriter out;
+    NodeId nodeId = 42;
+    auto node = std::make_shared<RSSurfaceRenderNode>(nodeId++);
+
+    RSProfiler::DumpNodeSubClassNode(*node, out);
+    std::string expected { "\"subclass\":{\"Parent\":0,\"Name\":\"SurfaceNode\",\"hasConsumer\":0,"
+                           "\"Alpha\":\"1.000000 (include ContextAlpha: 1.000000)\",\"Visible\":\"1 Region [Empty]\","
+                           "\"Opaque\":\"Region [Empty]\",\"OcclusionBg\":\"0\",\"SpecialLayer\":\"0\"}" };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodeSubsurfacesRoot, TestSize.Level1)
+{
+    JsonWriter out;
+    NodeId nodeId = 42;
+    auto node = std::make_shared<RSRootRenderNode>(nodeId++);
+
+    RSProfiler::DumpNodeSubClassNode(*node, out);
+    std::string expected { "\"subclass\":{\"Visible\":1,\"Size\":[null,null],\"EnableRender\":1}" };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodeSubsurfacesLogDisp, TestSize.Level1)
+{
+    JsonWriter out;
+    NodeId nodeId = 42;
+    auto node = std::make_shared<RSLogicalDisplayRenderNode>(nodeId++, RSDisplayNodeConfig {});
+
+    RSProfiler::DumpNodeSubClassNode(*node, out);
+    std::string expected { "\"subclass\":{\"skipLayer\":0}" };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodeOptionalFlags, TestSize.Level1)
+{
+    JsonWriter out;
+    NodeId nodeId = 42;
+    auto node = std::make_shared<RSRenderNode>(nodeId++);
+    node->SetBootAnimation(true);
+    node->SetContainBootAnimation(true);
+    node->SetSubTreeDirty(true);
+
+    RSProfiler::DumpNodeOptionalFlags(*node, out);
+    std::string expected {
+        "\"GetBootAnimation\":1,\"isContainBootAnimation_\":1,\"isSubTreeDirty\":1,\"IsPureContainer\":1"
+    };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+HWTEST(RSProfilerDumpTest, DumpNodeDrawCmdModifiers, TestSize.Level1)
+{
+    JsonWriter out;
+    NodeId nodeId = 42;
+    auto node = std::make_shared<RSRenderNode>(nodeId++);
+    auto modifier = std::make_shared<ModifierNG::RSFrameClipRenderModifier>();
+
+    node->AddModifier(modifier);
+    RSProfiler::DumpNodeDrawCmdModifiers(*node, out);
+    std::string expected { "\"DrawCmdModifiers\":[{\"type\":12,\"modifiers\":[]}]" };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodeDrawCmdModifiersWithCustomDrawCmdList, TestSize.Level1)
+{
+    NodeId nodeId = 42;
+    auto node = std::make_shared<RSRenderNode>(nodeId++);
+    const auto property = std::make_shared<RSRenderProperty<int>>(1, 0);
+    auto modifier =
+        ModifierNG::RSRenderModifier::MakeRenderModifier(ModifierNG::RSModifierType::TRANSITION_STYLE, property);
+    Drawing::DrawCmdListPtr cmdList = Drawing::DrawCmdList::CreateFromData(Drawing::CmdListData { "1234", 4 }, true);
+
+    auto opItem1 = std::make_shared<Drawing::HybridRenderPixelMapSizeOpItem>(100, 200);
+    auto opItem2 = std::make_shared<Drawing::RotateOpItem>(90, 10, 20);
+    cmdList->drawOpItems_.emplace_back(opItem1);
+    cmdList->drawOpItems_.emplace_back(opItem2);
+
+    std::shared_ptr<RSRenderProperty<Drawing::DrawCmdListPtr>> property2 =
+        std::make_shared<RSRenderProperty<Drawing::DrawCmdListPtr>>(cmdList, 0);
+    node->AddModifier(modifier);
+
+    JsonWriter out1;
+    RSProfiler::DumpNodeDrawCmdModifiers(*node, out1);
+    std::string expected1 { "\"DrawCmdModifiers\":[{\"type\":25,\"modifiers\":[{\"drawCmdList\":[]}]}]" };
+    expected1.append(1, '\0');
+    EXPECT_EQ(out1.GetDumpString(), expected1);
+
+    modifier->AttachProperty(ModifierNG::RSPropertyType::TRANSITION_STYLE, property2);
+
+    JsonWriter out2;
+    RSProfiler::DumpNodeDrawCmdModifiers(*node, out2);
+    std::string expected2 { "\"DrawCmdModifiers\":[{\"type\":25,\"modifiers\":[{\"drawCmdList\":"
+                            "[\"HYBRID_RENDER_PIXELMAP_SIZE_OPITEM\",\"ROTATE_OPITEM\"]}]}]" };
+    expected2.append(1, '\0');
+    EXPECT_EQ(out2.GetDumpString(), expected2);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodeDrawCmdModifiersWithPropertyForegroundColor, TestSize.Level1)
+{
+    NodeId nodeId = 42;
+    auto node = std::make_shared<RSRenderNode>(nodeId++);
+    auto modifier = std::make_shared<ModifierNG::RSEnvForegroundColorRenderModifier>();
+    node->AddModifier(modifier);
+
+    {
+        JsonWriter out1;
+        RSProfiler::DumpNodeDrawCmdModifiers(*node, out1);
+        std::string expected1 { "\"DrawCmdModifiers\":[{\"type\":31,\"modifiers\":[]}]" };
+        expected1.append(1, '\0');
+        EXPECT_EQ(out1.GetDumpString(), expected1);
+    }
+
+    std::shared_ptr<RSRenderPropertyBase> property1 =
+        std::make_shared<RSRenderProperty<RSColor>>(RSColor(1, 2, 3, 0xa), 0);
+    modifier->AttachProperty(ModifierNG::RSPropertyType::ENV_FOREGROUND_COLOR, property1);
+
+    {
+        JsonWriter out2;
+        RSProfiler::DumpNodeDrawCmdModifiers(*node, out2);
+        std::string expected2 {
+            "\"DrawCmdModifiers\":[{\"type\":31,\"modifiers\":[{\"ENV_FOREGROUND_COLOR\":\"#102030a (RGBA)\"}]}]"
+        };
+        expected2.append(1, '\0');
+        EXPECT_EQ(out2.GetDumpString(), expected2);
+    }
+
+    std::shared_ptr<RSRenderPropertyBase> property2 = std::make_shared<RSRenderProperty<int>>(42, 0);
+    modifier->AttachProperty(ModifierNG::RSPropertyType::ENV_FOREGROUND_COLOR_STRATEGY, property2);
+
+    {
+        JsonWriter out3;
+        RSProfiler::DumpNodeDrawCmdModifiers(*node, out3);
+        std::string expected3 {
+            "\"DrawCmdModifiers\":[{\"type\":31,\"modifiers\":[{\"ENV_FOREGROUND_COLOR\":\"#102030a (RGBA)\"},"
+            "{\"ENV_FOREGROUND_COLOR_STRATEGY\":42}]}]"
+        };
+        expected3.append(1, '\0');
+        EXPECT_EQ(out3.GetDumpString(), expected3);
+    }
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodeDrawCmdModifiersWithPropertyCustomClipFrame, TestSize.Level1)
+{
+    NodeId nodeId = 42;
+    auto node = std::make_shared<RSRenderNode>(nodeId++);
+    auto modifier = std::make_shared<ModifierNG::RSFrameClipRenderModifier>();
+    std::shared_ptr<RSRenderPropertyBase> property = std::make_shared<RSRenderProperty<int>>(1, 101);
+    node->AddModifier(modifier);
+
+    JsonWriter out1;
+    RSProfiler::DumpNodeDrawCmdModifiers(*node, out1);
+    std::string expected1 { "\"DrawCmdModifiers\":[{\"type\":12,\"modifiers\":[]}]" };
+    expected1.append(1, '\0');
+    EXPECT_EQ(out1.GetDumpString(), expected1);
+
+    modifier->AttachProperty(ModifierNG::RSPropertyType::CUSTOM_CLIP_TO_FRAME, property);
+
+    JsonWriter out2;
+    RSProfiler::DumpNodeDrawCmdModifiers(*node, out2);
+    std::string expected2 { "\"DrawCmdModifiers\":[{\"type\":12,\"modifiers\":[{\"CUSTOM_CLIP_TO_FRAME\":\"[1]\"}]}]" };
+    expected2.append(1, '\0');
+    EXPECT_EQ(out2.GetDumpString(), expected2);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodeDrawCmdModifiersWithPropertyHdrBrightness, TestSize.Level1)
+{
+    NodeId nodeId = 42;
+    auto node = std::make_shared<RSRenderNode>(nodeId++);
+    auto modifier = std::make_shared<ModifierNG::RSHDRBrightnessRenderModifier>();
+    std::shared_ptr<RSRenderPropertyBase> property = std::make_shared<RSRenderProperty<float>>(3.14, 0);
+    node->AddModifier(modifier);
+
+    JsonWriter out1;
+    RSProfiler::DumpNodeDrawCmdModifiers(*node, out1);
+    std::string expected1 { "\"DrawCmdModifiers\":[{\"type\":32,\"modifiers\":[]}]" };
+    expected1.append(1, '\0');
+    EXPECT_EQ(out1.GetDumpString(), expected1);
+
+    modifier->AttachProperty(ModifierNG::RSPropertyType::HDR_BRIGHTNESS, property);
+
+    JsonWriter out2;
+    RSProfiler::DumpNodeDrawCmdModifiers(*node, out2);
+    std::string expected2 { "\"DrawCmdModifiers\":[{\"type\":32,\"modifiers\":[{\"HDR_BRIGHTNESS\":3.14}]}]" };
+    expected2.append(1, '\0');
+    EXPECT_EQ(out2.GetDumpString(), expected2);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodeProperties, TestSize.Level1)
+{
+    JsonWriter out;
+    NodeId nodeId = 42;
+    auto invisible = std::make_shared<RSRenderNode>(nodeId++);
+    invisible->GetMutableRenderProperties().SetScale({ 0.125, 0.5 });
+    invisible->GetMutableRenderProperties().SetBounds({ 0, 0, 345, 456 });
+    invisible->GetMutableRenderProperties().SetFrame({ 31, 41, 51, 61 });
+    invisible->GetMutableRenderProperties().SetVisible(false);
+
+    RSProfiler::DumpNodeProperties(invisible->GetRenderProperties(), out);
+    std::string expected { "\"Properties\":{\"Bounds\":[0,0,345,456],\"Frame\":[31,41,51,61],"
+                           "\"IsVisible\":0,\"ScaleX\":0.125,\"ScaleY\":0.5}" };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodePropertiesClip, TestSize.Level1)
+{
+    JsonWriter out;
+    NodeId nodeId = 42;
+    auto node = std::make_shared<RSRenderNode>(nodeId++);
+    node->GetMutableRenderProperties().SetClipToBounds(true);
+    node->GetMutableRenderProperties().SetClipToFrame(true);
+
+    RSProfiler::DumpNodePropertiesClip(node->GetRenderProperties(), out);
+    std::string expected { "\"ClipToBounds\":1,\"ClipToFrame\":1" };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodePropertiesTransform, TestSize.Level1)
+{
+    JsonWriter out;
+    NodeId nodeId = 42;
+    auto node = std::make_shared<RSRenderNode>(nodeId++);
+    node->GetMutableRenderProperties().SetPivot({ 2.5, 100 });
+    node->GetMutableRenderProperties().SetRotation(30);
+    node->GetMutableRenderProperties().SetRotationX(45);
+    node->GetMutableRenderProperties().SetRotationY(60);
+    node->GetMutableRenderProperties().SetTranslate({ 10, 20 });
+    node->GetMutableRenderProperties().SetTranslateZ(30);
+    node->GetMutableRenderProperties().SetScale({ 3, 5 });
+
+    RSProfiler::DumpNodePropertiesTransform(node->GetRenderProperties(), out);
+    std::string expected { "\"Pivot\":[2.5,100],"
+                           "\"Rotation\":30,"
+                           "\"RotationX\":45,"
+                           "\"RotationY\":60,"
+                           "\"TranslateX\":10,"
+                           "\"TranslateY\":20,"
+                           "\"TranslateZ\":30,"
+                           "\"ScaleX\":3,"
+                           "\"ScaleY\":5" };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodePropertiesDecoration, TestSize.Level1)
+{
+    JsonWriter out;
+    NodeId nodeId = 42;
+    auto node = std::make_shared<RSRenderNode>(nodeId++);
+
+    node->GetMutableRenderProperties().SetCornerRadius({ 1, 2, 3, 4 });
+    node->GetMutableRenderProperties().SetPixelStretch(Vector4f { 5, 6, 7, 8 });
+    node->GetMutableRenderProperties().SetAlpha(0.5);
+    node->GetMutableRenderProperties().SetSpherize(0.25);
+    node->GetMutableRenderProperties().SetForegroundColor(Color(2, 3, 4, 5));
+    node->GetMutableRenderProperties().SetBackgroundColor(Color(0x20, 0x30, 0x40, 0x50));
+    node->GetMutableRenderProperties().SetBgImageDstRect({ 10, 20, 30, 40 });
+
+    RSProfiler::DumpNodePropertiesDecoration(node->GetRenderProperties(), out);
+
+    std::string expected { "\"CornerRadius\":[1,2,3,4],"
+                           "\"PixelStretch\":{\"left\":5,\"top\":6,\"right\":7,\"bottom\":8},"
+                           "\"Alpha\":0.5,"
+                           "\"Spherize\":0.25,"
+                           "\"ForegroundColor\":\"#5020304 (ARGB)\","
+                           "\"BackgroundColor\":\"#50203040 (ARGB)\","
+                           "\"BgImage\":[10,20,30,40]" };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodePropertiesShadow, TestSize.Level1)
+{
+    JsonWriter out;
+    NodeId nodeId = 42;
+    auto node = std::make_shared<RSRenderNode>(nodeId++);
+
+    node->GetMutableRenderProperties().SetShadowColor(Color(2, 3, 4, 5));
+    node->GetMutableRenderProperties().SetShadowOffsetX(12);
+    node->GetMutableRenderProperties().SetShadowOffsetY(14);
+    node->GetMutableRenderProperties().SetShadowAlpha(1); // rewrite ShadowColor.alpha
+    node->GetMutableRenderProperties().SetShadowElevation(16);
+    node->GetMutableRenderProperties().SetShadowRadius(18);
+    node->GetMutableRenderProperties().SetShadowIsFilled(true);
+
+    RSProfiler::DumpNodePropertiesShadow(node->GetRenderProperties(), out);
+
+    std::string expected { "\"ShadowColor\":\"#ff020304 (ARGB)\","
+                           "\"ShadowOffsetX\":12,"
+                           "\"ShadowOffsetY\":14,"
+                           "\"ShadowAlpha\":1,"
+                           "\"ShadowElevation\":16,"
+                           "\"ShadowRadius\":18,"
+                           "\"ShadowIsFilled\":1" };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodePropertiesEffectsBorder, TestSize.Level1)
+{
+    JsonWriter out;
+    NodeId nodeId = 42;
+    auto node = std::make_shared<RSRenderNode>(nodeId++);
+
+    node->GetMutableRenderProperties().SetBorderColor(
+        { { 1, 2, 3, 4 }, { 5, 6, 7, 8 }, { 9, 10, 11, 12 }, { 13, 14, 15, 16 } }); // +
+    node->GetMutableRenderProperties().SetBorderDashGap({ 17, 18, 19, 20 });        // -
+    node->GetMutableRenderProperties().SetBorderDashWidth({ 21, 22, 23, 24 });      // -
+    node->GetMutableRenderProperties().SetBorderStyle({ 0, 1, 2, 3 });              // +
+    node->GetMutableRenderProperties().SetBorderWidth({ 25, 26, 27, 28 });          // +
+
+    RSProfiler::DumpNodePropertiesEffects(node->GetRenderProperties(), out);
+
+    std::string expected {
+        "\"Border\":\"colors: 67174915, 134546951, 201918987, 269291023, widths: 25, 26, 27, 28, styles: 0, 1, 2, 3, \""
+    };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodePropertiesEffectsFilter, TestSize.Level1)
+{
+    JsonWriter out;
+    NodeId nodeId = 42;
+    auto node = std::make_shared<RSRenderNode>(nodeId++);
+
+    RSProperties& prop = node->GetMutableRenderProperties();
+    prop.SetForegroundBlurRadiusX(5);
+    prop.GenerateForegroundBlurFilter();
+
+    RSProfiler::DumpNodePropertiesEffects(node->GetRenderProperties(), out);
+
+    std::string expected { "\"Filter\":\"RSBlurFilterBlur, radius: 5 sigma\"" };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodePropertiesEffectsOtherFilter, TestSize.Level1)
+{
+    JsonWriter out;
+    NodeId nodeId = 42;
+    auto node = std::make_shared<RSRenderNode>(nodeId++);
+    node->GetMutableRenderProperties().SetBackgroundBlurRadiusX(1);
+    node->GetMutableRenderProperties().SetBackgroundBlurRadiusY(2);
+    node->GetMutableRenderProperties().GenerateBackgroundBlurFilter();
+
+    auto foregroundFilterCache = RSFilter::CreateBlurFilter(3, 4);
+    node->GetMutableRenderProperties().SetForegroundFilterCache(foregroundFilterCache);
+
+    RSProfiler::DumpNodePropertiesEffects(node->GetRenderProperties(), out);
+
+    std::string expected { "\"BackgroundFilter\":\"RSBlurFilterBlur, radius: 1 "
+                           "sigma\",\"ForegroundFilter\":\"RSBlurFilter blur radius is 3.000000 sigma\"" };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodePropertiesEffectsOutline, TestSize.Level1)
+{
+    JsonWriter out;
+    NodeId nodeId = 42;
+    auto node = std::make_shared<RSRenderNode>(nodeId++);
+    node->GetMutableRenderProperties().SetOutlineColor(
+        { { 0, 0, 1, 1 }, { 0, 0, 2, 1 }, { 0, 0, 3, 1 }, { 0, 0, 4, 1 } });   // +
+    node->GetMutableRenderProperties().SetOutlineDashGap({ 5, 6, 7, 8 });      // -
+    node->GetMutableRenderProperties().SetOutlineDashWidth({ 9, 10, 11, 12 }); // -
+    node->GetMutableRenderProperties().SetOutlineRadius({ 17, 18, 19, 20 });   // -
+    node->GetMutableRenderProperties().SetOutlineStyle({ 0, 1, 2, 3 });        // +
+    node->GetMutableRenderProperties().SetOutlineWidth({ 13, 14, 15, 16 });    // +
+
+    RSProfiler::DumpNodePropertiesEffects(node->GetRenderProperties(), out);
+
+    std::string expected {
+        "\"Outline\":\"colors: 16777217, 16777218, 16777219, 16777220, widths: 13, 14, 15, 16, styles: 0, 1, 2, 3, \""
+    };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodePropertiesEffectsGravityEtc, TestSize.Level1)
+{
+    JsonWriter out;
+    NodeId nodeId = 42;
+    auto node = std::make_shared<RSRenderNode>(nodeId++);
+    node->GetMutableRenderProperties().SetFrameGravity(Gravity::RESIZE_ASPECT_BOTTOM_RIGHT);
+    node->GetMutableRenderProperties().SetUseEffect(true);
+    node->GetMutableRenderProperties().SetGrayScale(0.5);
+    node->GetMutableRenderProperties().SetLightUpEffect(30);
+    node->GetMutableRenderProperties().SetDynamicLightUpRate(0.25f);
+    node->GetMutableRenderProperties().SetDynamicLightUpDegree(45.f);
+
+    RSProfiler::DumpNodePropertiesEffects(node->GetRenderProperties(), out);
+
+    std::string expected { "\"FrameGravity\":12,"
+                           "\"GetUseEffect\":1,"
+                           "\"GrayScale\":0.5,"
+                           "\"LightUpEffect\":30,"
+                           "\"DynamicLightUpRate\":0.25,"
+                           "\"DynamicLightUpDegree\":45" };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodePropertiesColorDefault, TestSize.Level1)
+{
+    JsonWriter out;
+    RSProperties properties;
+    std::string expected {};
+
+    RSProfiler::DumpNodePropertiesColor(properties, out);
+    EXPECT_EQ(out.GetDumpString(), expected);
+
+    properties.SetBrightness(1.f);
+    properties.SetContrast(1.f);
+    properties.SetSaturate(1.f);
+    properties.SetSepia(0.f);
+    properties.SetInvert(0.f);
+    properties.SetHueRotate(0.f);
+    properties.SetColorBlend(RSColor { 0, 0, 0, 0 });
+    properties.SetColorBlendMode(0);
+
+    RSProfiler::DumpNodePropertiesColor(properties, out);
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodePropertiesColorValues, TestSize.Level1)
+{
+    JsonWriter out;
+    RSProperties properties;
+
+    properties.SetBrightness(2.f);
+    properties.SetContrast(3.f);
+    properties.SetSaturate(4.f);
+    properties.SetSepia(0.5f);
+    properties.SetInvert(0.25f);
+    properties.SetHueRotate(0.125f);
+    properties.SetColorBlend(RSColor { 10, 20, 30, 40 });
+    properties.SetColorBlendMode(static_cast<int>(RSColorBlendMode::DARKEN));
+    properties.SetColorBlendApplyType(static_cast<int>(RSColorBlendApplyType::SAVE_LAYER_ALPHA));
+
+    RSProfiler::DumpNodePropertiesColor(properties, out);
+
+    std::string expected { "\"Brightness\":2,"
+                           "\"Contrast\":3,"
+                           "\"Saturate\":4,"
+                           "\"Sepia\":0.5,"
+                           "\"Invert\":0.25,"
+                           "\"HueRotate\":0.125,"
+                           "\"ColorBlend\":\"#280a141e (ARGB)\","
+                           "\"skblendmode\":16," // RSColorBlendMode::DARKEN - 1;
+                           "\"blendType\":2" };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodeAnimations, TestSize.Level1)
+{
+    JsonWriter out;
+    RSAnimationManager anims;
+    AnimationId id = 123;
+    PropertyId propertyId = 1;
+    auto property = std::make_shared<RSRenderAnimatableProperty<float>>(0.5f);
+    auto anim1 = std::make_shared<RSRenderKeyframeAnimation>(id, propertyId, property);
+
+    anims.AddAnimation(anim1);
+
+    RSProfiler::DumpNodeAnimations(anims, out);
+
+    std::string expected {
+        "\"RSAnimationManager\":[{\"id\":123,\"type\":\"Type:RSRenderKeyframeAnimation, "
+        "ModifierType: INVALID\",\"AnimationState\":0,\"Duration\":300,\"StartDelay\":0,\"Speed\":1,"
+        "\"RepeatCount\":1,\"AutoReverse\":0,\"Direction\":1,\"FillMode\":1,\"RepeatCallbackEnable\":0,"
+        "\"FrameRateRange_min\":0,\"FrameRateRange_max\":0,\"FrameRateRange_prefered\":0}]"
+    };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+
+HWTEST(RSProfilerDumpTest, DumpNodeChildrenListUpdate, TestSize.Level1)
+{
+    JsonWriter out;
+    const NodeId nodeId = 42;
+
+    auto node = std::make_shared<RSRenderNode>(nodeId);
+    EXPECT_TRUE(node->GetIsFullChildrenListValid());
+    auto child1 = std::make_shared<RSRenderNode>(1);
+    auto child2 = std::make_shared<RSRenderNode>(2);
+    node->AddChild(child1);
+    node->AddChild(child2);
+    node->disappearingChildren_.emplace_back(child1, 1);
+    node->disappearingChildren_.emplace_back(child2, 2);
+
+    RSProfiler::DumpNodeChildrenListUpdate(*node, out);
+
+    std::string expected {
+        "\"children update\":{\"current count\":0,\"disappearing count\":2,\"expected count\":\"0 + 2\"}"
+    };
+    expected.append(1, '\0');
+    EXPECT_EQ(out.GetDumpString(), expected);
+}
+} // namespace OHOS::Rosen
diff --git a/rosen/test/render_service/render_service_profiler/unittest/rs_profiler_network_test.cpp b/rosen/test/render_service/render_service_profiler/unittest/rs_profiler_network_test.cpp
index f38a92246cde14f9d5ad8d50013e2721f4da0e4d..275ba5f16d73f05922e6e0c9388fde40f9935966 100644
--- a/rosen/test/render_service/render_service_profiler/unittest/rs_profiler_network_test.cpp
+++ b/rosen/test/render_service/render_service_profiler/unittest/rs_profiler_network_test.cpp
@@ -33,6 +33,7 @@ void RSProfilerNetworkTest::SetUp()
 {
     Network::outgoing_ = {};
     Network::incoming_ = {};
+    Network::isRunning_ = true;
 }
 
 /*
@@ -88,6 +89,7 @@ HWTEST_F(RSProfilerNetworkTest, RSProfilerNetworkSendBinaryTest, testing::ext::T
 
     auto type = static_cast<char>(Packet::BINARY);
     std::vector<char> sendData { type, 11, 0, 0, 0, 0, 1, 2, 3, 4, 5 };
+    ASSERT_FALSE(Network::outgoing_.empty());
     EXPECT_EQ(Network::outgoing_.back(), sendData);
 }
 
@@ -104,6 +106,7 @@ HWTEST_F(RSProfilerNetworkTest, RSProfilerNetworkSendMessageTest, testing::ext::
     Network::SendMessage("hello");
     auto type = static_cast<char>(Packet::LOG);
     std::vector<char> sendData { type, 10, 0, 0, 0, 'h', 'e', 'l', 'l', 'o' };
+    ASSERT_FALSE(Network::outgoing_.empty());
     EXPECT_EQ(Network::outgoing_.back(), sendData);
 }
 
@@ -121,6 +124,7 @@ HWTEST_F(RSProfilerNetworkTest, RSProfilerNetworkSendRdcPathTest, testing::ext::
     auto type = static_cast<char>(Packet::BINARY);
     auto subtype = static_cast<char>(PackageID::RS_PROFILER_RDC_BINARY);
     std::vector<char> sendData { type, 10, 0, 0, 0, subtype, 'p', 'a', 't', 'h' };
+    ASSERT_FALSE(Network::outgoing_.empty());
     EXPECT_EQ(Network::outgoing_.back(), sendData);
 }
 
@@ -138,6 +142,7 @@ HWTEST_F(RSProfilerNetworkTest, RSProfilerNetworkSendDclPathTest, testing::ext::
     auto type = static_cast<char>(Packet::BINARY);
     auto subtype = static_cast<char>(PackageID::RS_PROFILER_DCL_BINARY);
     std::vector<char> sendData { type, 10, 0, 0, 0, subtype, 'p', 'a', 't', 'h' };
+    ASSERT_FALSE(Network::outgoing_.empty());
     EXPECT_EQ(Network::outgoing_.back(), sendData);
 }
 
@@ -158,6 +163,7 @@ HWTEST_F(RSProfilerNetworkTest, RSProfilerNetworkSendSkpTest, testing::ext::Test
     auto type = static_cast<char>(Packet::BINARY);
     auto subtype = static_cast<char>(PackageID::RS_PROFILER_SKP_BINARY);
     std::vector<char> sendData { type, 12, 0, 0, 0, subtype, 0, 1, 2, 3, 4, 5 };
+    ASSERT_FALSE(Network::outgoing_.empty());
     EXPECT_EQ(Network::outgoing_.back(), sendData);
 }
 
@@ -174,11 +180,13 @@ HWTEST_F(RSProfilerNetworkTest, RSProfilerNetworkSendPerfNodeListTest, testing::
     auto subtype = static_cast<char>(PackageID::RS_PROFILER_RSTREE_PERF_NODE_LIST);
     std::vector<char> sendData { type, 6, 0, 0, 0, subtype };
     Network::SendRSTreePerfNodeList(nodelist);
+    ASSERT_FALSE(Network::outgoing_.empty());
     EXPECT_EQ(Network::outgoing_.back(), sendData);
 
     nodelist = { 1, 2 };
     sendData = { type, 22, 0, 0, 0, subtype, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 };
     Network::SendRSTreePerfNodeList(nodelist);
+    ASSERT_FALSE(Network::outgoing_.empty());
     EXPECT_EQ(Network::outgoing_.back(), sendData);
 }
 
@@ -194,6 +202,7 @@ HWTEST_F(RSProfilerNetworkTest, RSProfilerNetworkSendSingleNodePerfTest, testing
     auto subtype = static_cast<char>(PackageID::RS_PROFILER_RSTREE_SINGLE_NODE_PERF);
     std::vector<char> sendData { type, 22, 0, 0, 0, subtype, 10, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0 };
     Network::SendRSTreeSingleNodePerf(10, 80);
+    ASSERT_FALSE(Network::outgoing_.empty());
     EXPECT_EQ(Network::outgoing_.back(), sendData);
 }
 
diff --git a/rosen/test/render_service/render_service_profiler/unittest/rs_profiler_pixelmap_test.cpp b/rosen/test/render_service/render_service_profiler/unittest/rs_profiler_pixelmap_test.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..7f0e7bc39c77cbbce6aae85624ad22dd57aaa73b
--- /dev/null
+++ b/rosen/test/render_service/render_service_profiler/unittest/rs_profiler_pixelmap_test.cpp
@@ -0,0 +1,477 @@
+/*
+ * Copyright (c) 2025 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <cstdint>
+#include <cstring>
+#include <memory>
+#include <sys/mman.h>
+#include <vector>
+
+#include "gtest/gtest.h"
+#include "gtest/hwext/gtest-tag.h"
+#include "image_type.h"
+#include "parameters.h"
+#include "pixel_map.h"
+#include "rs_profiler.h"
+#include "rs_profiler_cache.h"
+#include "rs_profiler_pixelmap.h"
+#include "surface_buffer.h"
+
+using OHOS::sptr;
+using OHOS::SurfaceBuffer;
+using OHOS::Media::AllocatorType;
+using OHOS::Media::ImageInfo;
+using OHOS::Media::PIXEL_MAP_ERR;
+using OHOS::Media::PixelMap;
+using OHOS::Media::PixelMemInfo;
+using OHOS::Rosen::RSProfiler;
+
+using namespace testing;
+using namespace testing::ext;
+
+namespace OHOS::Rosen {
+
+constexpr int TEN = 10;
+constexpr int HUNDRED = 100;
+
+HWTEST(RSProfilerPixelMap, MarshalPixelMap, TestSize.Level1)
+{
+    OHOS::system::SetParameter("persist.graphic.profiler.enabled", "1");
+    RSProfiler::testing_ = true;
+    std::vector<uint32_t> colors(HUNDRED);
+    for (int i = 0; i < colors.size(); ++i) {
+        colors[i] = 4 * i;
+    }
+
+    Media::InitializationOptions options;
+    options.size.width = TEN;
+    options.size.height = TEN;
+    options.srcRowStride = 0;
+    options.pixelFormat = Media::PixelFormat::RGBA_8888;
+    Parcel parcel;
+    std::shared_ptr<Media::PixelMap> map = Media::PixelMap::Create(colors.data(), colors.size(), options);
+    auto successfulMarshaling = RSProfiler::MarshalPixelMap(parcel, map);
+    EXPECT_TRUE(successfulMarshaling);
+}
+
+HWTEST(RSProfilerPixelMap, UnmarshalPixelMap, TestSize.Level1)
+{
+    OHOS::system::SetParameter("persist.graphic.profiler.enabled", "1");
+    RSProfiler::testing_ = true;
+
+    Parcel parcel;
+    auto pixelMap = RSProfiler::UnmarshalPixelMap(parcel, nullptr);
+
+    EXPECT_EQ(pixelMap, nullptr);
+}
+
+HWTEST(RSProfilerPixelMap, PlaybackParcel, TestSize.Level1)
+{
+    OHOS::system::SetParameter("persist.graphic.profiler.enabled", "1");
+    RSProfiler::testing_ = true;
+    RSProfiler::SetMode(Mode::READ_EMUL);
+
+    std::vector<uint32_t> colors(HUNDRED);
+    for (int i = 0; i < colors.size(); ++i) {
+        colors[i] = 4 * i;
+    }
+
+    Media::InitializationOptions options;
+    options.size.width = TEN;
+    options.size.height = TEN;
+    options.srcRowStride = 0;
+    options.pixelFormat = Media::PixelFormat::RGBA_8888;
+    options.allocatorType = AllocatorType::HEAP_ALLOC;
+    std::shared_ptr<Media::PixelMap> map = Media::PixelMap::Create(colors.data(), colors.size(), options);
+
+    uint8_t parcelMemory[sizeof(Parcel) + 1];
+    auto* parcelPtr = new (parcelMemory + 1) Parcel;
+
+    auto successfulMarshaling = RSProfiler::MarshalPixelMap(*parcelPtr, map);
+    EXPECT_TRUE(successfulMarshaling);
+
+    auto pixelMap = RSProfiler::UnmarshalPixelMap(*parcelPtr, nullptr);
+
+    EXPECT_NE(pixelMap, nullptr);
+    parcelPtr->~Parcel();
+}
+
+HWTEST(RSProfilerPixelMap, MarshalUnmarshalNstdPixelMap, TestSize.Level1)
+{
+    OHOS::system::SetParameter("persist.graphic.profiler.enabled", "1");
+    constexpr auto PIXELMAP_STRING_PIXEL_CHECK = "persist.graphic.profiler.pixelcheck";
+    bool isSucces = OHOS::system::SetParameter(PIXELMAP_STRING_PIXEL_CHECK, "1");
+    EXPECT_TRUE(isSucces);
+    RSProfiler::testing_ = true;
+    std::vector<uint32_t> colors(HUNDRED);
+    for (int i = 0; i < colors.size(); ++i) {
+        colors[i] = 4 * i;
+    }
+
+    Media::InitializationOptions options;
+    options.size.width = TEN;
+    options.size.height = TEN;
+    options.srcRowStride = 0;
+    options.pixelFormat = Media::PixelFormat::RGBA_8888;
+    options.allocatorType = AllocatorType::HEAP_ALLOC;
+    Parcel parcel;
+    std::shared_ptr<Media::PixelMap> map = Media::PixelMap::Create(colors.data(), colors.size(), options);
+    EXPECT_NE(map, nullptr);
+    auto successfulMarshaling = RSProfiler::MarshalPixelMap(parcel, map);
+    EXPECT_TRUE(successfulMarshaling);
+
+    // This will use UnmarshalPixelMapNstd
+    auto pixelMapNstd = RSProfiler::UnmarshalPixelMap(parcel, nullptr);
+
+    EXPECT_NE(pixelMapNstd, nullptr);
+    OHOS::system::SetParameter(PIXELMAP_STRING_PIXEL_CHECK, "0");
+}
+
+HWTEST(RSProfilerPixelMap, MarshalUnmarshalPixelMap, TestSize.Level1)
+{
+    OHOS::system::SetParameter("persist.graphic.profiler.enabled", "1");
+    RSProfiler::testing_ = true;
+    std::vector<uint32_t> colors(HUNDRED);
+    for (int i = 0; i < colors.size(); ++i) {
+        colors[i] = 4 * i;
+    }
+
+    Media::InitializationOptions options;
+    options.size.width = TEN;
+    options.size.height = TEN;
+    options.srcRowStride = 0;
+    options.pixelFormat = Media::PixelFormat::RGBA_8888;
+    Parcel parcel;
+    std::shared_ptr<Media::PixelMap> map = Media::PixelMap::Create(colors.data(), colors.size(), options);
+    EXPECT_NE(map, nullptr);
+    auto successfulMarshaling = RSProfiler::MarshalPixelMap(parcel, map);
+    EXPECT_TRUE(successfulMarshaling);
+
+    auto pixelMap = RSProfiler::UnmarshalPixelMap(parcel, nullptr);
+
+    EXPECT_NE(pixelMap, nullptr);
+}
+
+class RSProfilerPixelMapStorage : public testing::Test {
+public:
+    static void SetUpTestCase()
+    {
+        OHOS::system::SetParameter("persist.graphic.profiler.enabled", "1");
+    }
+    static void TearDownTestCase() {}
+    void SetUp() override {}
+    void TearDown() override
+    {
+        ImageCache::Reset();
+    }
+};
+
+HWTEST_F(RSProfilerPixelMapStorage, PushPullHeapPixelMap, TestSize.Level1)
+{
+    RSProfiler::testing_ = true;
+    std::vector<uint32_t> colors(HUNDRED);
+    for (int i = 0; i < colors.size(); ++i) {
+        colors[i] = 4 * i;
+    }
+
+    Media::InitializationOptions options;
+    options.size.width = TEN;
+    options.size.height = TEN;
+    options.srcRowStride = 0;
+    options.pixelFormat = Media::PixelFormat::RGBA_8888;
+    options.allocatorType = AllocatorType::HEAP_ALLOC;
+    Parcel parcel;
+    std::shared_ptr<Media::PixelMap> map = Media::PixelMap::Create(colors.data(), colors.size(), options);
+    EXPECT_NE(map, nullptr);
+    auto id = ImageCache::New();
+    auto successfulPushMap = PixelMapStorage::Push(id, *map);
+
+    EXPECT_TRUE(successfulPushMap);
+
+    auto memory = std::make_shared<std::array<uint8_t, HUNDRED>>();
+
+    ImageInfo imageInfo;
+    PixelMemInfo pixelMemInfo = { .base = memory->data(),
+        .context = nullptr,
+        .bufferSize = sizeof(*memory),
+        .allocatorType = AllocatorType::HEAP_ALLOC,
+        .isAstc = false,
+        .displayOnly = false };
+    size_t skipBytes;
+    auto successfulPull = PixelMapStorage::Pull(id, imageInfo, pixelMemInfo, skipBytes);
+
+    EXPECT_TRUE(successfulPull);
+
+    auto id2 = ImageCache::New();
+    auto successfulPushMemory = PixelMapStorage::Push(id2, imageInfo, pixelMemInfo, skipBytes);
+
+    EXPECT_TRUE(successfulPushMemory);
+
+    ImageInfo defaultImageInfo;
+    PixelMemInfo defaultPixelMemInfo;
+    size_t defaultSkipBytes;
+    auto successfulDefaultPull = PixelMapStorage::Pull(id2, defaultImageInfo, defaultPixelMemInfo, defaultSkipBytes);
+
+    EXPECT_TRUE(successfulDefaultPull);
+}
+
+HWTEST_F(RSProfilerPixelMapStorage, PushPullSharedPixelMap, TestSize.Level1)
+{
+    RSProfiler::testing_ = true;
+    std::vector<uint32_t> colors(HUNDRED);
+    for (int i = 0; i < colors.size(); ++i) {
+        colors[i] = 4 * i;
+    }
+
+    Media::InitializationOptions options;
+    options.size.width = TEN;
+    options.size.height = TEN;
+    options.srcRowStride = 0;
+    options.pixelFormat = Media::PixelFormat::RGBA_8888;
+    options.allocatorType = AllocatorType::SHARE_MEM_ALLOC;
+    Parcel parcel;
+    std::shared_ptr<Media::PixelMap> map = Media::PixelMap::Create(colors.data(), colors.size(), options);
+    EXPECT_NE(map, nullptr);
+    auto id = ImageCache::New();
+    auto successfulPushMap = PixelMapStorage::Push(id, *map);
+
+    EXPECT_TRUE(successfulPushMap);
+
+    ImageInfo imageInfo;
+
+    PixelMemInfo pixelMemInfo = { .base = reinterpret_cast<uint8_t*>(malloc(HUNDRED)),
+        .context = nullptr,
+        .bufferSize = HUNDRED,
+        .allocatorType = AllocatorType::SHARE_MEM_ALLOC,
+        .isAstc = false,
+        .displayOnly = false };
+    size_t skipBytes;
+    auto successfulPull = PixelMapStorage::Pull(id, imageInfo, pixelMemInfo, skipBytes);
+
+    EXPECT_TRUE(successfulPull);
+    EXPECT_NE(pixelMemInfo.base, nullptr);
+    EXPECT_EQ(pixelMemInfo.bufferSize, HUNDRED);
+
+    auto id2 = ImageCache::New();
+    auto successfulPushMemory = PixelMapStorage::Push(id2, imageInfo, pixelMemInfo, skipBytes);
+
+    EXPECT_TRUE(successfulPushMemory);
+
+    ImageInfo defaultImageInfo;
+    PixelMemInfo defaultPixelMemInfo;
+    size_t defaultSkipBytes;
+    auto successfulDefaultPull = PixelMapStorage::Pull(id2, defaultImageInfo, defaultPixelMemInfo, defaultSkipBytes);
+
+    EXPECT_TRUE(successfulDefaultPull);
+}
+
+HWTEST_F(RSProfilerPixelMapStorage, PushPullDMAPixelMap, TestSize.Level1)
+{
+    RSProfiler::testing_ = true;
+    std::vector<uint32_t> colors(HUNDRED);
+    for (int i = 0; i < colors.size(); ++i) {
+        colors[i] = 4 * i;
+    }
+
+    Media::InitializationOptions options;
+    options.size.width = TEN;
+    options.size.height = TEN;
+    options.srcRowStride = 0;
+    options.pixelFormat = Media::PixelFormat::RGBA_8888;
+    options.allocatorType = AllocatorType::DMA_ALLOC;
+    Parcel parcel;
+    std::shared_ptr<Media::PixelMap> map = Media::PixelMap::Create(colors.data(), colors.size(), options);
+    EXPECT_NE(map, nullptr);
+    auto id = ImageCache::New();
+    auto successfulPushMap = PixelMapStorage::Push(id, *map);
+    std::cout << "Pushed map" << std::endl;
+
+    EXPECT_TRUE(successfulPushMap);
+
+    ImageInfo imageInfo;
+    PixelMemInfo pixelMemInfo = { .base = reinterpret_cast<uint8_t*>(malloc(HUNDRED)),
+        .context = nullptr,
+        .bufferSize = HUNDRED,
+        .allocatorType = AllocatorType::DMA_ALLOC,
+        .isAstc = false,
+        .displayOnly = false };
+    size_t skipBytes;
+    auto successfulPull = PixelMapStorage::Pull(id, imageInfo, pixelMemInfo, skipBytes);
+    std::cout << "Pulled map" << std::endl;
+
+    EXPECT_TRUE(successfulPull);
+
+    auto id2 = ImageCache::New();
+    auto successfulPushMemory = PixelMapStorage::Push(id2, imageInfo, pixelMemInfo, skipBytes);
+    std::cout << "Pushed memory" << std::endl;
+
+    EXPECT_TRUE(successfulPushMemory);
+
+    ImageInfo defaultImageInfo;
+    PixelMemInfo defaultPixelMemInfo;
+    size_t defaultSkipBytes;
+    auto successfulDefaultPull = PixelMapStorage::Pull(id2, defaultImageInfo, defaultPixelMemInfo, defaultSkipBytes);
+    std::cout << "Pulled memory" << std::endl;
+
+    EXPECT_TRUE(successfulDefaultPull);
+}
+
+HWTEST_F(RSProfilerPixelMapStorage, AlmostFullStorage, TestSize.Level1)
+{
+    // Constant defined in PixelMapStorage::Fits
+    constexpr auto maxConsumption = 1024u * 1024u * 1024u;
+    ImageCache::consumption_ = maxConsumption - 50;
+    RSProfiler::testing_ = true;
+    std::vector<uint32_t> colors(HUNDRED);
+    for (int i = 0; i < colors.size(); ++i) {
+        colors[i] = 4 * i;
+    }
+
+    Media::InitializationOptions options;
+    options.size.width = TEN;
+    options.size.height = TEN;
+    options.srcRowStride = 0;
+    options.pixelFormat = Media::PixelFormat::RGBA_8888;
+    options.allocatorType = AllocatorType::HEAP_ALLOC;
+    Parcel parcel;
+    std::shared_ptr<Media::PixelMap> map = Media::PixelMap::Create(colors.data(), colors.size(), options);
+    EXPECT_NE(map, nullptr);
+    auto id = ImageCache::New();
+    auto unsuccessfulPushMap = PixelMapStorage::Push(id, *map);
+
+    EXPECT_FALSE(unsuccessfulPushMap);
+
+    auto memory = std::make_shared<std::array<uint8_t, HUNDRED>>();
+
+    ImageInfo imageInfo;
+    PixelMemInfo pixelMemInfo = { .base = memory->data(),
+        .context = nullptr,
+        .bufferSize = sizeof(*memory),
+        .allocatorType = AllocatorType::HEAP_ALLOC,
+        .isAstc = false,
+        .displayOnly = false };
+    size_t skipBytes = 0;
+    auto successfulDefaultPullWithFullStorage = PixelMapStorage::Pull(id, imageInfo, pixelMemInfo, skipBytes);
+
+    EXPECT_TRUE(successfulDefaultPullWithFullStorage);
+
+    auto memory_v2 = std::make_shared<std::array<uint8_t, HUNDRED>>();
+
+    PixelMemInfo pixelMemInfo_v2 = { .base = memory_v2->data(),
+        .context = nullptr,
+        .bufferSize = HUNDRED,
+        .allocatorType = AllocatorType::HEAP_ALLOC,
+        .isAstc = false,
+        .displayOnly = false };
+
+    auto id2 = ImageCache::New();
+    auto unsuccessfulPushMemory = PixelMapStorage::Push(id2, imageInfo, pixelMemInfo_v2, skipBytes);
+
+    EXPECT_FALSE(unsuccessfulPushMemory);
+
+    ImageInfo defaultImageInfo;
+    PixelMemInfo defaultPixelMemInfo;
+    size_t defaultSkipBytes;
+    auto successfulDefaultPull = PixelMapStorage::Pull(id2, defaultImageInfo, defaultPixelMemInfo, defaultSkipBytes);
+
+    EXPECT_TRUE(successfulDefaultPull);
+}
+
+HWTEST_F(RSProfilerPixelMapStorage, CopyImageData, TestSize.Level1)
+{
+    std::vector<uint8_t> dstImage;
+    dstImage.reserve(HUNDRED);
+    auto imagePtr = std::make_shared<Image>();
+    imagePtr->data.resize(HUNDRED);
+    bool successfulCopied = PixelMapStorage::CopyImageData(imagePtr.get(), dstImage.data(), dstImage.capacity());
+    EXPECT_TRUE(successfulCopied);
+}
+
+HWTEST_F(RSProfilerPixelMapStorage, CopyImageDataJpeg, TestSize.Level1)
+{
+    const int CHANNELS = 3;
+    auto jpegImg = std::make_shared<Image>();
+    jpegImg->data.resize(sizeof(TextureHeader) + CHANNELS * HUNDRED);
+
+    TextureHeader* header = reinterpret_cast<TextureHeader*>(jpegImg->data.data());
+
+    header->rgbEncodedSize = HUNDRED;
+    header->totalOriginalSize = CHANNELS * HUNDRED;
+    header->magicNumber = 'JPEG';
+
+    std::vector<uint8_t> dstImage;
+    dstImage.reserve(HUNDRED * TEN);
+
+    bool copiedJpeg = PixelMapStorage::CopyImageData(jpegImg.get(), dstImage.data(), dstImage.capacity());
+    EXPECT_TRUE(copiedJpeg);
+}
+
+HWTEST_F(RSProfilerPixelMapStorage, CopyImageDataLZ4, TestSize.Level1)
+{
+    const int CHANNELS = 3;
+    auto xlzz4Img = std::make_shared<Image>();
+    xlzz4Img->data.resize(sizeof(TextureHeader) + CHANNELS * HUNDRED);
+
+    TextureHeader* header = reinterpret_cast<TextureHeader*>(xlzz4Img->data.data());
+
+    header->totalOriginalSize = CHANNELS * HUNDRED;
+    header->magicNumber = 'XLZ4';
+
+    std::vector<uint8_t> dstImage;
+    dstImage.reserve(HUNDRED * TEN);
+
+    bool copiedLz4 = PixelMapStorage::CopyImageData(xlzz4Img.get(), dstImage.data(), dstImage.capacity());
+    EXPECT_TRUE(copiedLz4);
+}
+
+HWTEST_F(RSProfilerPixelMapStorage, CopyImageDataFailing, TestSize.Level1)
+{
+    std::vector<uint8_t> dstImage;
+    dstImage.reserve(HUNDRED);
+    auto imagePtr = std::make_shared<Image>();
+    imagePtr->data.resize(HUNDRED);
+    {
+        std::cout << "Copy from null source" << std::endl;
+        bool nullSrc = PixelMapStorage::CopyImageData(nullptr, dstImage.data(), dstImage.capacity());
+        EXPECT_FALSE(nullSrc);
+    }
+    {
+        std::cout << "Copy to null destination" << std::endl;
+        bool nullDst = PixelMapStorage::CopyImageData(imagePtr.get(), nullptr, 100);
+        EXPECT_FALSE(nullDst);
+    }
+    {
+        std::cout << "Copy from empty source" << std::endl;
+        std::vector<uint8_t> emptySrcImage;
+        bool emptySrc = PixelMapStorage::CopyImageData(
+            emptySrcImage.data(), emptySrcImage.size(), dstImage.data(), dstImage.capacity());
+        EXPECT_FALSE(emptySrc);
+    }
+    {
+        std::cout << "Copy to empty destination" << std::endl;
+        std::vector<uint8_t> emptyDstImage;
+        bool emptyDst = PixelMapStorage::CopyImageData(imagePtr.get(), emptyDstImage.data(), 0);
+        EXPECT_FALSE(emptyDst);
+    }
+}
+
+HWTEST_F(RSProfilerPixelMapStorage, SurfaceBuffer, TestSize.Level1)
+{
+    sptr<SurfaceBuffer> buffer;
+    auto surfaceBuffer = PixelMapStorage::IncrementSurfaceBufferReference(buffer);
+    EXPECT_EQ(surfaceBuffer, nullptr);
+}
+
+} // namespace OHOS::Rosen
\ No newline at end of file
diff --git a/rosen/test/render_service/render_service_profiler/unittest/rs_profiler_test.cpp b/rosen/test/render_service/render_service_profiler/unittest/rs_profiler_test.cpp
index 89fbee82b7f33636c296c3fcfef525721caba771..68b9e4d530a07592242ed3d2832cd5a484fc471e 100644
--- a/rosen/test/render_service/render_service_profiler/unittest/rs_profiler_test.cpp
+++ b/rosen/test/render_service/render_service_profiler/unittest/rs_profiler_test.cpp
@@ -22,9 +22,12 @@
 #include "rs_profiler_network.h"
 #include "rs_profiler_utils.h"
 
-#include "pipeline/rs_main_thread.h"
-#include "pipeline/rs_render_service.h"
+#include "common/rs_common_def.h"
+#include "pipeline/main_thread/rs_main_thread.h"
+#include "pipeline/main_thread/rs_render_service.h"
 #include "pipeline/rs_context.h"
+#include "pipeline/rs_render_node_gc.h"
+#include "pipeline/rs_root_render_node.h"
 
 using namespace testing;
 using namespace testing::ext;
@@ -47,6 +50,10 @@ public:
 
 RSRenderService* GetAndInitRenderService()
 {
+    MemoryTrack::Instance();
+    MemorySnapshot::Instance();
+    RSRenderNodeGC::Instance();
+
     auto renderService(new RSRenderService());
     if (renderService) {
         renderService->mainThread_ = new RSMainThread();
@@ -141,7 +148,7 @@ bool CheckDrawCmdModifiersEqual(const RSContext& context, const std::vector<std:
         const auto& drawCmdModifiers = patchedNode->GetDrawCmdModifiers();
 
         for (const auto& [modifierType, modifiers] : drawCmdModifiers) {
-            HRPI("TestDoubleReplay: For index %" PRIu64 " and modifierType %{public}hd count in buffer %" PRIu64, index,
+            HRPI("TestDoubleReplay: For index %" PRIu32 " and modifierType %{public}hd count in buffer %" PRIu32, index,
                 modifierType, bufferOfDrawCmdModifiers[index].count(modifierType));
             if (bufferOfDrawCmdModifiers[index].count(modifierType) == 0) {
                 isDrawCmdModifiersEqual = false;
@@ -149,7 +156,7 @@ bool CheckDrawCmdModifiersEqual(const RSContext& context, const std::vector<std:
             }
 
             const auto& currentBufferList = bufferOfDrawCmdModifiers[index].at(modifierType);
-            HRPI("TestDoubleReplay: For modifierType %{public}hd modifiers size %" PRIu64 " buffer size %" PRIu64,
+            HRPI("TestDoubleReplay: For modifierType %{public}hd modifiers size %" PRIu32 " buffer size %" PRIu32,
                 modifierType, modifiers.size(), currentBufferList.size());
             if (currentBufferList.size() != modifiers.size()) {
                 isDrawCmdModifiersEqual = false;
@@ -237,25 +244,6 @@ HWTEST_F(RSProfilerTest, RSTreeTest, testing::ext::TestSize.Level1)
     });
 }
 
-
-/*
- * @tc.name: RSTreeTest
- * @tc.desc: Test SecureScreen
- * @tc.type: FUNC
- * @tc.require:
- */
-HWTEST_F(RSProfilerTest, SecureScreen, testing::ext::TestSize.Level1)
-{
-    RSProfiler::testing_ = true;
-
-    sptr<RSRenderService> renderService = GetAndInitRenderService();
-
-    EXPECT_NO_THROW({
-        RSProfiler::Init(renderService);
-        EXPECT_FALSE(RSProfiler::IsSecureScreen());
-    });
-}
-
 /*
  * @tc.name: RSDoubleTransformationTest
  * @tc.desc: Test double use of FirstFrameMarshalling & FirstFrameUnmarshalling with test tree
@@ -332,7 +320,7 @@ HWTEST_F(RSProfilerTest, IfNeedToSkipDuringReplay, Function | Reliability | Larg
     void* allocated = malloc(length);
     EXPECT_TRUE(data->BuildFromMalloc(allocated, length));
 
-    auto* buffer = new[std::nothrow] uint8_t[sizeof(MessageParcel) + 1];
+    auto* buffer = new (std::nothrow) uint8_t[sizeof(MessageParcel) + 1];
     MessageParcel* messageParcel = new (buffer + 1) MessageParcel;
 
     EXPECT_TRUE(RSMarshallingHelper::Marshalling(*messageParcel, data));
@@ -482,10 +470,10 @@ HWTEST_F(RSProfilerTestWithContext, HiddenSpaceTurnOnOff, Level1)
     TestTreeBuilder treeBuilder;
     std::cout << "Preparing to run test..." << std::endl;
 
-    auto originalTree = treeBuilder.Build(*RSProfiler::context_, topNodeId, true, true);
+    treeBuilder.Build(*RSProfiler::context_, topNodeId, true, true);
     std::cout << "Builded test tree" << std::endl;
 
-    auto patchedTree = treeBuilder.Build(*RSProfiler::context_, Utils::PatchNodeId(topNodeId), true, true, true);
+    treeBuilder.Build(*RSProfiler::context_, Utils::PatchNodeId(topNodeId), true, true, true);
     std::cout << "Builded patched test tree" << std::endl;
 
     GenerateFullChildrenListForAll(*RSProfiler::context_);
@@ -512,13 +500,19 @@ HWTEST_F(RSProfilerTestWithContext, HiddenSpaceTurnOnOff, Level1)
     checkTree(RSProfiler::context_->GetGlobalRootRenderNode(), topNodeId);
     std::cout << "Checked test tree third time" << std::endl;
 
-    for (auto node : originalTree) {
-        RSProfiler::context_->GetMutableNodeMap().UnRegisterUnTreeNode(node->GetId());
-    }
-    for (auto patchedNode : originalTree) {
-        RSProfiler::context_->GetMutableNodeMap().UnRegisterUnTreeNode(patchedNode->GetId());
-    }
-
     std::cout << "End of test" << std::endl;
 }
+
+/*
+ * @tc.name: RSTreeTest
+ * @tc.desc: Test SecureScreen
+ * @tc.type: FUNC
+ * @tc.require:
+ */
+HWTEST_F(RSProfilerTestWithContext, SecureScreen, testing::ext::TestSize.Level1)
+{
+    RSProfiler::testing_ = true;
+    EXPECT_FALSE(RSProfiler::IsSecureScreen());
+}
+
 } // namespace OHOS::Rosen
\ No newline at end of file
diff --git a/rosen/test/render_service/render_service_profiler/unittest/standard/BUILD.gn b/rosen/test/render_service/render_service_profiler/unittest/standard/BUILD.gn
index 4ce5f0853cd32fab2fbba175bc2ed874d8812812..3326f32b6b5c900e480eac2ad6ff4e9b0db8e498 100644
--- a/rosen/test/render_service/render_service_profiler/unittest/standard/BUILD.gn
+++ b/rosen/test/render_service/render_service_profiler/unittest/standard/BUILD.gn
@@ -15,12 +15,14 @@ import("//build/test.gni")
 import("//foundation/graphic/graphic_2d/graphic_config.gni")
 import("$graphic_2d_root/rosen/modules/render_service_base/config.gni")
 
-group("test") {
+group("unittest") {
   testonly = true
 
   deps = [
     "command:unittest",
     "common:unittest",
     "modifier:unittest",
+    "platform/ohos:unittest",
+    "transaction:unittest",
   ]
 }
diff --git a/rosen/test/render_service/render_service_profiler/unittest/standard/command/BUILD.gn b/rosen/test/render_service/render_service_profiler/unittest/standard/command/BUILD.gn
index e25983531269c8ce65aef0939010a119a196ba77..9ace5465dbf90bfe35d731a2842224a157b0c001 100644
--- a/rosen/test/render_service/render_service_profiler/unittest/standard/command/BUILD.gn
+++ b/rosen/test/render_service/render_service_profiler/unittest/standard/command/BUILD.gn
@@ -155,7 +155,6 @@ ohos_static_library("rs_test_command") {
   public_external_deps = [
     "c_utils:utils",
     "eventhandler:libeventhandler",
-    "googletest:gtest_main",
   ]
 
   subsystem_name = "graphic"
diff --git a/rosen/test/render_service/render_service_profiler/unittest/standard/common/BUILD.gn b/rosen/test/render_service/render_service_profiler/unittest/standard/common/BUILD.gn
index 158d6dc62a1e28f79ac9e4e6e00ba075c8458469..cd3a50e4213a8e8e666bc673c6ad265b025621b5 100644
--- a/rosen/test/render_service/render_service_profiler/unittest/standard/common/BUILD.gn
+++ b/rosen/test/render_service/render_service_profiler/unittest/standard/common/BUILD.gn
@@ -63,7 +63,6 @@ ohos_static_library("rs_test_common") {
 
   public_external_deps = [
     "c_utils:utils",
-    "googletest:gtest_main",
   ]
 
   subsystem_name = "graphic"
diff --git a/rosen/test/render_service/render_service_profiler/unittest/standard/modifier/BUILD.gn b/rosen/test/render_service/render_service_profiler/unittest/standard/modifier/BUILD.gn
index cc2458f849df15ded005f200f5ea498702d05ce3..85d9c4f9c62ae54aa67ab6bc688a83458ada5494 100644
--- a/rosen/test/render_service/render_service_profiler/unittest/standard/modifier/BUILD.gn
+++ b/rosen/test/render_service/render_service_profiler/unittest/standard/modifier/BUILD.gn
@@ -63,7 +63,6 @@ ohos_static_library("rs_test_modifier") {
 
   public_external_deps = [
     "c_utils:utils",
-    "googletest:gtest_main",
   ]
 
   subsystem_name = "graphic"
diff --git a/rosen/test/render_service/render_service_profiler/unittest/standard/platform/ohos/BUILD.gn b/rosen/test/render_service/render_service_profiler/unittest/standard/platform/ohos/BUILD.gn
index 3d3b8fd34938d194c2abdba7d0f94997ad5b4a79..cb8ff4ee29fadf5c8163f6bc8d17e65f7c8c9447 100644
--- a/rosen/test/render_service/render_service_profiler/unittest/standard/platform/ohos/BUILD.gn
+++ b/rosen/test/render_service/render_service_profiler/unittest/standard/platform/ohos/BUILD.gn
@@ -12,89 +12,80 @@
 # limitations under the License.
 
 import("//build/test.gni")
-import("//foundation/graphic/graphic_2d/ace_platforms.gni")
 import("//foundation/graphic/graphic_2d/graphic_config.gni")
+import("$graphic_2d_root/rosen/modules/render_service_base/config.gni")
 
-module_output_path = "graphic_2d/graphic_2d/rosen/modules/render_service_profiler/standard/platform/ohos"
+module_output_path =
+    "graphic_2d/graphic_2d/rosen/modules/render_service_profiler/standard"
 
-##############################  RSAshmemHelperStandardTest  ##################################
-ohos_unittest("RSAshmemHelperStandardTest") {
-  module_out_path = module_output_path
+group("unittest") {
+  testonly = true
 
-  sources = [ "rs_ashmem_helper_test.cpp" ]
+  deps = [ ":RSIRenderServiceIpcInterfaceCodeTest" ]
+}
 
-  cflags = [
-    "-Dprivate=public",
-    "-Dprotected=public",
-  ]
+###############################################################################
+config("pipeline_test") {
+  include_dirs = [ "$graphic_2d_root/rosen/modules/render_service/core" ]
+}
 
-  configs = [
-    ":render_test",
-    "$graphic_2d_root/rosen/modules/render_service_base:export_config",
-  ]
+## Build RSIRenderServiceIpcInterfaceCodeTest
+ohos_unittest("RSIRenderServiceIpcInterfaceCodeTest") {
+  module_out_path = module_output_path
+  sources = [ "rs_irender_service_connection_ipc_interface_code_test.cpp" ]
+  deps = [ ":rs_test_common" ]
+}
 
+## Build rs_test_common.a {{{
+config("rs_test_common_public_config") {
   include_dirs = [
+    "$graphic_2d_root/rosen/include",
+    "$graphic_2d_root/rosen/modules/render_service/core",
+    "$graphic_2d_root/rosen/modules/render_service/core/feature_cfg",
+    "$graphic_2d_root/rosen/modules/render_service/core/feature_cfg/feature_param",
+    "$graphic_2d_root/rosen/modules/render_service/core/feature_cfg/feature_param/extend_feature",
+    "$graphic_2d_root/rosen/modules/render_service/core/feature_cfg/feature_param/performance_feature",
+    "$graphic_2d_root/rosen/modules/render_service/core/feature_cfg/xml_parser",
+    "$graphic_2d_root/rosen/modules/render_service/core/feature_cfg/xml_parser/extend_feature_parser",
+    "$graphic_2d_root/rosen/modules/render_service/core/feature_cfg/xml_parser/performance_feature_parser",
+    "$graphic_2d_root/rosen/modules/render_service_client/core",
     "$graphic_2d_root/rosen/modules/render_service_base/include",
     "$graphic_2d_root/rosen/modules/render_service_base/src",
-    "$graphic_2d_root/rosen/modules/render_service_client/core",
-    "$graphic_2d_root/rosen/include",
     "$graphic_2d_root/rosen/test/include",
-    "$graphic_2d_root/prebuilts/librarys/gpu/include",
-    "$graphic_2d_root/rosen/modules/render_service_client/core",
-    "$graphic_2d_root/utils/log",
+    "$graphic_2d_root/rosen/modules/render_service_base/include/platform/ohos/",
+    "$graphic_2d_root/rosen/test/render_service/render_service/unittest/pipeline/mock",
   ]
 
-  deps = [
-    "$graphic_2d_root/rosen/modules/render_service_base:librender_service_base",
-    "$graphic_2d_root/rosen/modules/render_service_client:librender_service_client",
+  cflags = [
+    "-Wall",
+    "-Werror",
+    "-g3",
+    "-Dprivate=public",
+    "-Dprotected=public",
   ]
+}
 
-  public_deps = [ "$graphic_2d_root/rosen/modules/composer/vsync:libvsync" ]
-  public_external_deps = [
-    "graphic_surface:sync_fence",
-    "skia:skia_canvaskit",
-  ]
+ohos_static_library("rs_test_common") {
+  visibility = [ ":*" ]
+  testonly = true
+  defines = []
+  defines += gpu_defines
 
-  if (defined(input_ext_feature_magiccursor) && input_ext_feature_magiccursor) {
-    defines = [ "OHOS_BUILD_ENABLE_MAGICCURSOR" ]
-  }
+  public_configs = [ ":rs_test_common_public_config" ]
 
-  if (rs_enable_gpu) {
-    public_deps += [
-      "$graphic_2d_root/frameworks/opengl_wrapper:EGL",
-      "$graphic_2d_root/frameworks/opengl_wrapper:GLESv3",
-    ]
-    public_external_deps += [ "openssl:libcrypto_shared" ]
-  }
+  public_deps = [
+    "$graphic_2d_root/rosen/modules/composer:libcomposer",
+    "$graphic_2d_root/rosen/modules/render_service:librender_service",
+    "$graphic_2d_root/rosen/modules/render_service_base:librender_service_base",
+    "$graphic_2d_root/rosen/modules/render_service_client:librender_service_client",
+  ]
 
-  external_deps = [
+  public_external_deps = [
     "c_utils:utils",
     "eventhandler:libeventhandler",
-    "googletest:gtest_main",
-    "hilog:libhilog",
-    "hisysevent:libhisysevent",
-    "hitrace:hitrace_meter",
-    "init:libbegetutil",
     "ipc:ipc_core",
-    "samgr:samgr_proxy",
-    "skia:skia_canvaskit",
   ]
 
   subsystem_name = "graphic"
   part_name = "graphic_2d"
 }
-
-###############################################################################
-config("render_test") {
-  visibility = [ ":*" ]
-  include_dirs = [
-    "$ace_root",
-    "$graphic_2d_root/rosen/modules/render_service_base",
-  ]
-}
-
-group("unittest") {
-  testonly = true
-
-  deps = [ ":RSAshmemHelperStandardTest" ]
-}
diff --git a/rosen/test/render_service/render_service_profiler/unittest/standard/transaction/rs_irender_service_connection_ipc_interface_code_test.cpp b/rosen/test/render_service/render_service_profiler/unittest/standard/platform/ohos/rs_irender_service_connection_ipc_interface_code_test.cpp
similarity index 99%
rename from rosen/test/render_service/render_service_profiler/unittest/standard/transaction/rs_irender_service_connection_ipc_interface_code_test.cpp
rename to rosen/test/render_service/render_service_profiler/unittest/standard/platform/ohos/rs_irender_service_connection_ipc_interface_code_test.cpp
index 546ee02595eee47d3c909346e011459e5b7dc287..07976daae7ef345126bd5f83fcd5e59785e21396 100644
--- a/rosen/test/render_service/render_service_profiler/unittest/standard/transaction/rs_irender_service_connection_ipc_interface_code_test.cpp
+++ b/rosen/test/render_service/render_service_profiler/unittest/standard/platform/ohos/rs_irender_service_connection_ipc_interface_code_test.cpp
@@ -130,8 +130,7 @@ HWTEST_F(RSIRenderServiceConnectionInterfaceCodeTest, FixEnumValue002, testing::
         ), 0x00002D);
     EXPECT_EQ(
         static_cast<uint32_t>(RSIRenderServiceConnectionInterfaceCode::NOTIFY_PAGE_NAME), 0x00002E);
-    EXPECT_EQ(
-        static_cast<uint32_t>(RSIRenderServiceConnectionInterfaceCode::TEST_LOAD_FILE_SUB_TREE), 0x00002F);
+    // TEST_LOAD_FILE_SUB_TREE was 0x00002F
     EXPECT_EQ(
         static_cast<uint32_t>(RSIRenderServiceConnectionInterfaceCode::TAKE_SELF_SURFACE_CAPTURE), 0x000030);
 
diff --git a/rosen/test/render_service/render_service_profiler/unittest/standard/transaction/BUILD.gn b/rosen/test/render_service/render_service_profiler/unittest/standard/transaction/BUILD.gn
index 2cf9bcdccbbd7055b03920c0074fe60a46787a44..3d3b8fd34938d194c2abdba7d0f94997ad5b4a79 100644
--- a/rosen/test/render_service/render_service_profiler/unittest/standard/transaction/BUILD.gn
+++ b/rosen/test/render_service/render_service_profiler/unittest/standard/transaction/BUILD.gn
@@ -12,82 +12,89 @@
 # limitations under the License.
 
 import("//build/test.gni")
+import("//foundation/graphic/graphic_2d/ace_platforms.gni")
 import("//foundation/graphic/graphic_2d/graphic_config.gni")
-import("$graphic_2d_root/rosen/modules/render_service_base/config.gni")
 
-module_output_path =
-    "graphic_2d/graphic_2d/rosen/modules/render_service_profiler/standard"
+module_output_path = "graphic_2d/graphic_2d/rosen/modules/render_service_profiler/standard/platform/ohos"
 
-group("unittest") {
-  testonly = true
-
-  deps = [ ":RSIRenderServiceIpcInterfaceCodeTest" ]
-}
-
-###############################################################################
-config("pipeline_test") {
-  include_dirs = [ "$graphic_2d_root/rosen/modules/render_service/core" ]
-}
-
-## Build RSIRenderServiceIpcInterfaceCodeTest
-ohos_unittest("RSIRenderServiceIpcInterfaceCodeTest") {
+##############################  RSAshmemHelperStandardTest  ##################################
+ohos_unittest("RSAshmemHelperStandardTest") {
   module_out_path = module_output_path
-  sources = [ "rs_irender_service_connection_ipc_interface_code_test.cpp" ]
-  deps = [ ":rs_test_common" ]
-}
 
-## Build rs_test_common.a {{{
-config("rs_test_common_public_config") {
-  include_dirs = [
-    "$graphic_2d_root/rosen/include",
-    "$graphic_2d_root/rosen/modules/render_service/core",
-    "$graphic_2d_root/rosen/modules/render_service/core/feature_cfg",
-    "$graphic_2d_root/rosen/modules/render_service/core/feature_cfg/feature_param",
-    "$graphic_2d_root/rosen/modules/render_service/core/feature_cfg/feature_param/extend_feature",
-    "$graphic_2d_root/rosen/modules/render_service/core/feature_cfg/feature_param/performance_feature",
-    "$graphic_2d_root/rosen/modules/render_service/core/feature_cfg/xml_parser",
-    "$graphic_2d_root/rosen/modules/render_service/core/feature_cfg/xml_parser/extend_feature_parser",
-    "$graphic_2d_root/rosen/modules/render_service/core/feature_cfg/xml_parser/performance_feature_parser",
-    "$graphic_2d_root/rosen/modules/render_service_client/core",
-    "$graphic_2d_root/rosen/modules/render_service_base/include",
-    "$graphic_2d_root/rosen/modules/render_service_base/src",
-    "$graphic_2d_root/rosen/test/include",
-    "$graphic_2d_root/rosen/modules/render_service_base/include/platform/ohos/",
-    "$graphic_2d_root/rosen/test/render_service/render_service/unittest/pipeline/mock",
-  ]
+  sources = [ "rs_ashmem_helper_test.cpp" ]
 
   cflags = [
-    "-Wall",
-    "-Werror",
-    "-g3",
     "-Dprivate=public",
     "-Dprotected=public",
   ]
-}
 
-ohos_static_library("rs_test_common") {
-  visibility = [ ":*" ]
-  testonly = true
-  defines = []
-  defines += gpu_defines
+  configs = [
+    ":render_test",
+    "$graphic_2d_root/rosen/modules/render_service_base:export_config",
+  ]
 
-  public_configs = [ ":rs_test_common_public_config" ]
+  include_dirs = [
+    "$graphic_2d_root/rosen/modules/render_service_base/include",
+    "$graphic_2d_root/rosen/modules/render_service_base/src",
+    "$graphic_2d_root/rosen/modules/render_service_client/core",
+    "$graphic_2d_root/rosen/include",
+    "$graphic_2d_root/rosen/test/include",
+    "$graphic_2d_root/prebuilts/librarys/gpu/include",
+    "$graphic_2d_root/rosen/modules/render_service_client/core",
+    "$graphic_2d_root/utils/log",
+  ]
 
-  public_deps = [
-    "$graphic_2d_root/rosen/modules/composer:libcomposer",
-    "$graphic_2d_root/rosen/modules/render_service:librender_service",
+  deps = [
     "$graphic_2d_root/rosen/modules/render_service_base:librender_service_base",
     "$graphic_2d_root/rosen/modules/render_service_client:librender_service_client",
   ]
 
+  public_deps = [ "$graphic_2d_root/rosen/modules/composer/vsync:libvsync" ]
   public_external_deps = [
+    "graphic_surface:sync_fence",
+    "skia:skia_canvaskit",
+  ]
+
+  if (defined(input_ext_feature_magiccursor) && input_ext_feature_magiccursor) {
+    defines = [ "OHOS_BUILD_ENABLE_MAGICCURSOR" ]
+  }
+
+  if (rs_enable_gpu) {
+    public_deps += [
+      "$graphic_2d_root/frameworks/opengl_wrapper:EGL",
+      "$graphic_2d_root/frameworks/opengl_wrapper:GLESv3",
+    ]
+    public_external_deps += [ "openssl:libcrypto_shared" ]
+  }
+
+  external_deps = [
     "c_utils:utils",
     "eventhandler:libeventhandler",
     "googletest:gtest_main",
+    "hilog:libhilog",
+    "hisysevent:libhisysevent",
+    "hitrace:hitrace_meter",
     "init:libbegetutil",
     "ipc:ipc_core",
+    "samgr:samgr_proxy",
+    "skia:skia_canvaskit",
   ]
 
   subsystem_name = "graphic"
   part_name = "graphic_2d"
 }
+
+###############################################################################
+config("render_test") {
+  visibility = [ ":*" ]
+  include_dirs = [
+    "$ace_root",
+    "$graphic_2d_root/rosen/modules/render_service_base",
+  ]
+}
+
+group("unittest") {
+  testonly = true
+
+  deps = [ ":RSAshmemHelperStandardTest" ]
+}
diff --git a/rosen/test/render_service/render_service_profiler/unittest/standard/platform/ohos/rs_ashmem_helper_test.cpp b/rosen/test/render_service/render_service_profiler/unittest/standard/transaction/rs_ashmem_helper_test.cpp
similarity index 100%
rename from rosen/test/render_service/render_service_profiler/unittest/standard/platform/ohos/rs_ashmem_helper_test.cpp
rename to rosen/test/render_service/render_service_profiler/unittest/standard/transaction/rs_ashmem_helper_test.cpp
