# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/graphic/graphic_2d/frameworks/text/config.gni")
import("//foundation/graphic/graphic_2d/graphic_config.gni")

group("textnapi") {
  deps = [
    ":text_napi",
    ":text_napi_impl",
  ]
}

config("text_config") {
  include_dirs = [ "../text" ]
}

config("local_text") {
  visibility = [ ":*" ]

  include_dirs = [
    "../text",
    "../text/fontdescriptor_napi/include",
    "../drawing",
    "$rosen_text_root/interface/export/rosen_text",
    "$graphic_2d_root/rosen/modules/2d_graphics/include",
    "$graphic_2d_root/interfaces/kits/napi/graphic/text/utils",
    "$rosen_text_root/service/texgine/src",
    "$rosen_text_root",
    "$rosen_text_root/adapter/skia",
    "$graphic_2d_root/frameworks/text/service/global_config",
  ]
}

ohos_shared_library("text_napi") {
  sources = [ "text_module.cpp" ]
  configs = [
    ":local_text",
    ":text_config",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }

  deps = [ ":text_napi_impl" ]

  external_deps = [
    "hilog:libhilog",
    "napi:ace_napi",
  ]

  relative_install_dir = "module/graphics"
  part_name = "graphic_2d"
  subsystem_name = "graphic"
}

ohos_shared_library("text_napi_impl") {
  branch_protector_ret = "pac_ret"
  sources = [
    "enum_napi/text_enum_napi.cpp",
    "fontcollection_napi/js_fontcollection.cpp",
    "fontdescriptor_napi/src/js_fontdescriptor.cpp",
    "js_text_init.cpp",
    "line_typeset_napi/js_line_typeset.cpp",
    "paragraph_builder_napi/js_paragraph_builder.cpp",
    "paragraph_napi/js_paragraph.cpp",
    "run_napi/js_run.cpp",
    "text_global_napi/js_text_global.cpp",
    "text_line_napi/js_text_line.cpp",
    "utils/napi_async_work.cpp",
    "utils/napi_common.cpp",
  ]

  configs = [
    ":local_text",
    ":text_config",
  ]

  public_configs = [
    ":text_config"
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }

  deps = [
    "$graphic_2d_root/interfaces/kits/napi/graphic/drawing:drawing_napi_impl",
    "$graphic_2d_root/rosen/modules/2d_graphics:2d_graphics",
    "$rosen_text_root:rosen_text",
    "$rosen_text_root/service/texgine:libtexgine_source",
  ]

  external_deps = [
    "ability_runtime:abilitykit_native",
    "ability_runtime:app_context",
    "eventhandler:libeventhandler",
    "graphic_surface:surface",
    "hilog:libhilog",
    "napi:ace_napi",
    "resource_management:global_resmgr",
  ]

  if (!defined(defines)) {
    defines = []
  }

  if (current_os == "ohos" || current_os == "ohos_ng") {
    external_deps += [ "init:libbegetutil" ]
    defines += [ "ENABLE_OHOS_ENHANCE" ]
  }
  cflags_cc = [ "-std=c++17" ]

  if (current_os == "mingw") {
    defines += [ "WINDOWS_PLATFORM" ]
  }

  innerapi_tags = [ "platformsdk" ]
  part_name = "graphic_2d"
  subsystem_name = "graphic"
}
