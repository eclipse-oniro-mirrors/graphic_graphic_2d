# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/graphic/graphic_2d/graphic_config.gni")

module_output_path = "graphic_2d/graphic_2d/graphic_test"

drawing_engine_sources = []
hardware_manager_sources = []
open_capability_sources = []
rs_display_effect_sources = [
  "rs_display_effect/animation/anim_callback_animation_test.cpp",
  "rs_display_effect/animation/anim_curve_animation_test.cpp",
  "rs_display_effect/animation/anim_curve_animation_test2.cpp",
  "rs_display_effect/animation/anim_custom_modifier_test.cpp",
  "rs_display_effect/animation/animation_protocol_test.cpp",
  "rs_display_effect/animation/point_custom_modifier_test.cpp",
  "rs_display_effect/content_display/content_effectnode_test.cpp",
  "rs_display_effect/content_display/rs_image_native_test.cpp",
  "rs_display_effect/property_display/appearance_alpha_test.cpp",
  "rs_display_effect/property_display/appearance_border_radius_test.cpp",
  "rs_display_effect/property_display/appearance_border_test.cpp",
  "rs_display_effect/property_display/appearance_clip_test.cpp",
  "rs_display_effect/property_display/appearance_g2cornerradius_test.cpp",
  "rs_display_effect/property_display/appearance_outlineborder_radius_test.cpp",
  "rs_display_effect/property_display/appearance_outlineborder_test.cpp",
  "rs_display_effect/property_display/appearance_pixelstretch_test.cpp",
  "rs_display_effect/property_display/appearance_shadow_test.cpp",
  "rs_display_effect/property_display/appearance_spherize_test.cpp",
  "rs_display_effect/property_display/background_blender_test.cpp",
  "rs_display_effect/property_display/background_blur_test.cpp",
  "rs_display_effect/property_display/background_color_test.cpp",
  "rs_display_effect/property_display/background_effect_test.cpp",
  "rs_display_effect/property_display/background_image_test.cpp",
  "rs_display_effect/property_display/background_shader_test.cpp",
  "rs_display_effect/property_display/background_useeffect_test.cpp",
  "rs_display_effect/property_display/fg_blur_test.cpp",
  "rs_display_effect/property_display/fg_colorbrightness_test.cpp",
  "rs_display_effect/property_display/fg_colorfilter_test.cpp",
  "rs_display_effect/property_display/fg_dynamicdimdegree_test.cpp",
  "rs_display_effect/property_display/fg_dynamiclightup_test.cpp",
  "rs_display_effect/property_display/fg_envfgcolor_test.cpp",
  "rs_display_effect/property_display/fg_fgcolor_test.cpp",
  "rs_display_effect/property_display/fg_lightupeffect_test.cpp",
  "rs_display_effect/property_display/fg_mask_test.cpp",
  "rs_display_effect/property_display/geom_cameradistance_test.cpp",
  "rs_display_effect/property_display/geom_clip_test.cpp",
  "rs_display_effect/property_display/geom_cornerradius_test.cpp",
  "rs_display_effect/property_display/geom_persp_test.cpp",
  "rs_display_effect/property_display/geom_pivotandrotation_test.cpp",
  "rs_display_effect/property_display/geom_rotation_test.cpp",
  "rs_display_effect/property_display/geom_scale_test.cpp",
  "rs_display_effect/property_display/geom_skew_test.cpp",
  "rs_display_effect/property_display/geom_transform_test.cpp",
  "rs_display_effect/property_display/geom_translation_test.cpp",
]
rs_effect_feature_sources = [
  "rs_effect_feature/effect_background_blur_test.cpp",
  "rs_effect_feature/effect_linear_gradient_blur_test.cpp",
  "rs_effect_feature/effect_magnifier_test.cpp",
  "rs_effect_feature/effect_pixel_stretch_test.cpp",
  "rs_effect_feature/effect_appearance_spherize_test.cpp",
  "rs_effect_feature/effect_content_effectnode_test.cpp",
  "rs_effect_feature/effect_background_blender_test.cpp",
  "rs_effect_feature/effect_background_effect_test.cpp",
  "rs_effect_feature/effect_fg_dynamiclightup_test.cpp",
  "rs_effect_feature/ui_filter_test/ui_filter_test.cpp",
  "rs_effect_feature/ui_filter_test/ui_filter_test_data_manager.cpp",
  "rs_effect_feature/ui_filter_test/ui_filter_test_factory.cpp",
]
rs_framework_sources = []
rs_func_feature_sources = [
  "rs_func_feature/component_capture/demo.cpp",
  "rs_func_feature/color_space_and_hdr/color_space_test.cpp",
  "rs_func_feature/multi_screen/logical_display_node_test.cpp",
  "rs_func_feature/multi_screen/multi_screen_test.cpp",
  "rs_func_feature/screen_capture/display_node_capture_test.cpp",
  "rs_func_feature/special_layer/security_layer_test.cpp",
  "rs_func_feature/special_layer/skip_layer_test.cpp",
  "rs_func_feature/special_layer/snapshot_skip_layer_test.cpp",
  "rs_func_feature/accessibility/curtain_screen_test.cpp",
]
rs_perform_feature_sources = [
  "rs_perform_feature/dirty_region/merge_dirty_rect_test.cpp",
  "rs_perform_feature/dirty_region/merge_dirty_history_test.cpp",
  "rs_perform_feature/dirty_region/update_self_draw_rect_test.cpp",
]

group("test") {
  testonly = true
  deps = [
    ":RSGraphicTest",
  ]
}

## Build RSGraphicTest
ohos_unittest("RSGraphicTest") {
  module_out_path = module_output_path
  sources = []
  sources += drawing_engine_sources
  sources += hardware_manager_sources
  sources += open_capability_sources
  sources += rs_display_effect_sources
  sources += rs_effect_feature_sources
  sources += rs_framework_sources
  sources += rs_func_feature_sources
  sources += rs_perform_feature_sources

  deps = [
    "$graphic_2d_root/graphic_test/graphic_test_framework:rs_graphic_test_main",
  ]

  defines = []
  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "graphic_surface:surface",
    "hilog:libhilog",
    "init:libbegetutil",
    "selinux_adapter:librestorecon",
  ]

  defines += gpu_defines

  cflags = [
    "-Wall",
    "-Werror",
    "-g3",
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  subsystem_name = "graphic"
  part_name = "graphic_2d"
}
