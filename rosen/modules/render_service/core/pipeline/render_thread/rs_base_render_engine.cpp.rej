diff a/rosen/modules/render_service/core/pipeline/render_thread/rs_base_render_engine.cpp b/rosen/modules/render_service/core/pipeline/render_thread/rs_base_render_engine.cpp	(rejected hunks)
@@ -59,7 +59,6 @@
 namespace OHOS {
 namespace Rosen {
 constexpr float DEFAULT_DISPLAY_NIT = 500.0f;
-constexpr float DEGAMMA = 1.0f / 2.2f;
 
 std::vector<RectI> RSRenderFrame::CheckAndVerifyDamageRegion(
     const std::vector<RectI>& rects, const RectI& surfaceRect) const
@@ -785,18 +784,10 @@ void RSBaseRenderEngine::DrawImage(RSPaintFilterCanvas& canvas, BufferDrawParam&
     if (imageShader == nullptr) {
         RS_LOGW("RSBaseRenderEngine::DrawImage imageShader is nullptr.");
     } else {
-        bool ret = (params.hdrHeteroType & RSHeteroHDRUtilConst::HDR_HETERO) && !ROSEN_LE(params.sdrNits, 0.0f);
-        if (ret) {
+        bool needHetero = (params.hdrHeteroType & RSHeteroHDRUtilConst::HDR_HETERO) && !ROSEN_LE(params.sdrNits, 0.0f);
+        if (needHetero) {
             float hdrRatio = std::pow((params.displayNits / params.sdrNits), DEGAMMA);
-            std::shared_ptr<Drawing::ShaderEffect> shader =
-
-
-                RSHeteroHDRManager::Instance().GenerateHDRHeteroShader(hdrRatio, params, imageShader);
-            if (shader == nullptr) {
-                RS_LOGE("[hdrHetero]:RSBaseRenderEngine DrawImage GenerateHDRHeteroShader is nullptr");
-                return;
-            }
-            params.paint.SetShaderEffect(shader);
+            RSHeteroHDRManager::Instance().GenerateHDRHeteroShader(params, imageShader);
         } else {
             params.paint.SetShaderEffect(imageShader);
             ColorSpaceConvertor(imageShader, params, videoInfo.parameter_, canvas.GetHDRProperties());
