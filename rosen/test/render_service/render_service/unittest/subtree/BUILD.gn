# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/graphic/graphic_2d/graphic_config.gni")

module_output_path = "graphic_2d/rosen_engine/render_service/subtree"

group("unittest") {
  testonly = true

  deps = [
    ":CompileCheck",
    ":RSParallelExecutorManagerMultiwinTest",
    ":RSParallelExecutorMultiwinTest",
    ":RSParallelManagerTest",
    ":RSParallelMultiwinPolicyTest",
    ":RSParallelRBPolicyTest",
  ]
}

action("CompileCheck") {
  script = "CompileCheck.py"
  outputs = [ "$target_out_dir/CompileCheckResult.txt" ]
}

###############################################################################
config("subtree_test") {
  include_dirs = [ "$graphic_2d_root/rosen/modules/render_service/core" ]
}

ohos_unittest("RSParallelExecutorManagerMultiwinTest") {
  module_out_path = module_output_path
  sources = [
    "$graphic_2d_ext_root/subtree/test/unittest/rs_parallel_executor_manager_multiwin_test.cpp",
    "$graphic_2d_root/rosen/modules/render_service_base/src/pipeline/rs_canvas_render_node.cpp",
  ]
  deps = [
    ":rs_test_common",
    "$graphic_2d_root/rosen/modules/composer:libcomposer",
    "$graphic_2d_root/rosen/modules/render_service:librender_service",
    "$graphic_2d_root/rosen/modules/render_service_base:librender_service_base",
    "$graphic_2d_root/rosen/modules/render_service_client:librender_service_client",
    "$graphic_2d_root/utils:socketpair",
  ]
  external_deps = [
    "c_utils:utils",
    "ffrt:libffrt",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_core",
    "memmgr:memmgrclient",
  ]
  if (defined(global_parts_info) && defined(global_parts_info.sensors_sensor)) {
    external_deps += [ "sensor:sensor_interface_native" ]
  }
}

ohos_unittest("RSParallelExecutorMultiwinTest") {
  module_out_path = module_output_path
  sources = [
    "$graphic_2d_ext_root/subtree/test/unittest/rs_parallel_executor_multiwin_test.cpp",
    "$graphic_2d_root/rosen/modules/render_service_base/src/pipeline/rs_canvas_render_node.cpp",
  ]
  deps = [
    ":rs_test_common",
    "$graphic_2d_root/rosen/modules/composer:libcomposer",
    "$graphic_2d_root/rosen/modules/render_service:librender_service",
    "$graphic_2d_root/rosen/modules/render_service_base:librender_service_base",
    "$graphic_2d_root/rosen/modules/render_service_client:librender_service_client",
    "$graphic_2d_root/utils:socketpair",
  ]
  external_deps = [
    "c_utils:utils",
    "ffrt:libffrt",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_core",
    "memmgr:memmgrclient",
  ]
  if (defined(global_parts_info) && defined(global_parts_info.sensors_sensor)) {
    external_deps += [ "sensor:sensor_interface_native" ]
  }
}

ohos_unittest("RSParallelRBPolicyTest") {
  module_out_path = module_output_path
  sources = [
    "$graphic_2d_ext_root/subtree/test/unittest/rs_parallel_rb_policy_test.cpp",
    "$graphic_2d_root/rosen/modules/render_service_base/src/pipeline/rs_canvas_render_node.cpp",
  ]
  deps = [
    ":rs_test_common",
    "$graphic_2d_root/rosen/modules/composer:libcomposer",
    "$graphic_2d_root/rosen/modules/render_service:librender_service",
    "$graphic_2d_root/rosen/modules/render_service_base:librender_service_base",
    "$graphic_2d_root/rosen/modules/render_service_client:librender_service_client",
    "$graphic_2d_root/utils:socketpair",
  ]
  external_deps = [
    ":rs_test_common",
    "$graphic_2d_root/rosen/modules/composer:libcomposer",
    "$graphic_2d_root/rosen/modules/render_service:librender_service",
    "$graphic_2d_root/rosen/modules/render_service_base:librender_service_base",
    "$graphic_2d_root/rosen/modules/render_service_client:librender_service_client",
    "$graphic_2d_root/utils:socketpair",
  ]
  if (defined(global_parts_info) && defined(global_parts_info.sensors_sensor)) {
    external_deps += [ "sensor:sensor_interface_native" ]
  }
}

## Build RSParallelManagerTest
ohos_unittest("RSParallelManagerTest") {
  module_out_path = module_output_path
  sources = [
    "$graphic_2d_ext_root/subtree/test/unittest/rs_parallel_manager_test.cpp",
    "$graphic_2d_root/rosen/modules/render_service_base/src/pipeline/rs_canvas_render_node.cpp",
  ]
  deps = [
    ":rs_test_common",
    "$graphic_2d_root/rosen/modules/composer:libcomposer",
    "$graphic_2d_root/rosen/modules/render_service:librender_service",
    "$graphic_2d_root/rosen/modules/render_service_base:librender_service_base",
    "$graphic_2d_root/rosen/modules/render_service_client:librender_service_client",
    "$graphic_2d_root/utils:socketpair",
  ]
  external_deps = [
    "c_utils:utils",
    "ffrt:libffrt",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_core",
    "memmgr:memmgrclient",
  ]
  if (defined(global_parts_info) && defined(global_parts_info.sensors_sensor)) {
    external_deps += [ "sensor:sensor_interface_native" ]
  }
}

ohos_unittest("RSParallelMultiwinPolicyTest") {
  module_out_path = module_output_path
  sources = [
    "$graphic_2d_ext_root/subtree/test/unittest/rs_parallel_multiwin_policy_test.cpp",
    "$graphic_2d_root/rosen/modules/render_service_base/src/pipeline/rs_canvas_render_node.cpp",
  ]
  deps = [
    ":rs_test_common",
    "$graphic_2d_root/rosen/modules/composer:libcomposer",
    "$graphic_2d_root/rosen/modules/render_service:librender_service",
    "$graphic_2d_root/rosen/modules/render_service_base:librender_service_base",
    "$graphic_2d_root/rosen/modules/render_service_client:librender_service_client",
    "$graphic_2d_root/utils:socketpair",
  ]
  external_deps = [
    "c_utils:utils",
    "ffrt:libffrt",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_core",
    "memmgr:memmgrclient",
  ]
  if (defined(global_parts_info) && defined(global_parts_info.sensors_sensor)) {
    external_deps += [ "sensor:sensor_interface_native" ]
  }
}

## Build rs_test_common
config("rs_test_common_public_config") {
  include_dirs = [
    "$graphic_2d_root/rosen/include",
    "$graphic_2d_root/rosen/modules/hyper_graphic_manager/core/config",
    "$graphic_2d_root/rosen/modules/hyper_graphic_manager/core/frame_rate_manager",
    "$graphic_2d_root/rosen/modules/hyper_graphic_manager/core/hgm_screen_manager",
    "$graphic_2d_root/rosen/modules/hyper_graphic_manager/core/soft_vsync_manager",
    "$graphic_2d_root/rosen/modules/hyper_graphic_manager/core/utils",
    "$graphic_2d_root/rosen/modules/render_service/core",
    "$graphic_2d_root/rosen/modules/render_service/core/feature_cfg",
    "$graphic_2d_root/rosen/modules/render_service/core/feature_cfg/feature_param",
    "$graphic_2d_root/rosen/modules/render_service/core/feature_cfg/feature_param/extend_feature",
    "$graphic_2d_root/rosen/modules/render_service/core/feature_cfg/feature_param/performance_feature",
    "$graphic_2d_root/rosen/modules/render_service/core/feature_cfg/xml_parser",
    "$graphic_2d_root/rosen/modules/render_service/core/feature_cfg/xml_parser/extend_feature_parser",
    "$graphic_2d_root/rosen/modules/render_service/core/feature_cfg/xml_parser/performance_feature_parser",
    "$graphic_2d_root/rosen/modules/render_service_client/core",
    "$graphic_2d_root/rosen/modules/render_service_base/src",
    "$graphic_2d_root/rosen/test/include",
    "$graphic_2d_root/rosen/modules/render_service_base/include",
    "$graphic_2d_root/rosen/test/render_service/render_service/unittest",
  ]

  if (graphic_2d_feature_subtree_parallel_enable) {
    include_dirs += [ "$graphic_2d_ext_root/subtree" ]
    include_dirs += [ "$graphic_2d_ext_root/subtree/multiwindow" ]
    include_dirs += [ "$graphic_2d_ext_root/subtree/policy" ]
  }

  cflags = [
    "-Wall",
    "-Werror",
    "-g3",
    "-Dprivate=public",
    "-Dprotected=public",
  ]
}

ohos_static_library("rs_test_common") {
  visibility = [ ":*" ]
  testonly = true
  defines = []
  defines += gpu_defines
  sources = [ "../pipeline/rs_test_util.cpp" ]
  public_configs = [ ":rs_test_common_public_config" ]

  subsystem_name = "graphic"
  part_name = "graphic_2d"
}