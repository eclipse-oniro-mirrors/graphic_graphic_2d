# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/graphic/graphic_2d/graphic_config.gni")

module_output_path = "graphic_2d/rosen_engine/render_service/feature"

group("unittest") {
  testonly = true
  deps = [ ":RenderServiceFeatureTest" ]
}

## Build RSUniHWcPrevalidateUtilTest
ohos_unittest("RSUniHWcPrevalidateUtilTest") {
  module_out_path = module_output_path
  sources = [ "hwc/rs_uni_hwc_prevalidate_util_test.cpp" ]
  deps += [ ":rs_test_common" ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
  ]
  if (defined(global_parts_info) && defined(global_parts_info.sensors_sensor)) {
    external_deps += [ "sensor:sensor_interface_native" ]
  }
  defines = []
  defines += gpu_defines
  if (defined(use_rosen_drawing) && use_rosen_drawing) {
    defines += [ "USE_ROSEN_DRAWING" ]
  }
  if (defined(use_video_processing_engine) && use_video_processing_engine) {
    include_dirs = []
    defines += [ "USE_VIDEO_PROCESSING_ENGINE" ]
    include_dirs += [ "$video_processing_engine_root/interfaces/inner_api" ]
    external_deps +=
        [ "drivers_interface_display:libdisplay_commontype_proxy_1.0" ]
  }
}

## Build RSEglImageManagerTest
ohos_unittest("RSEglImageManagerTest") {
  module_out_path = module_output_path
  sources = [
    "$graphic_2d_root/rosen/test/unittest_main/test_main.cpp",
    "gpuComposition/rs_egl_image_manager_test.cpp",
  ]
  deps += [ ":rs_test_common" ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
  ]
  if (defined(global_parts_info) && defined(global_parts_info.sensors_sensor)) {
    external_deps += [ "sensor:sensor_interface_native" ]
  }
  defines = []
  defines += gpu_defines
  if (defined(use_rosen_drawing) && use_rosen_drawing) {
    defines += [ "USE_ROSEN_DRAWING" ]
  }
  if (defined(use_video_processing_engine) && use_video_processing_engine) {
    include_dirs = []
    defines += [ "USE_VIDEO_PROCESSING_ENGINE" ]
    include_dirs += [ "$video_processing_engine_root/interfaces/inner_api" ]
    external_deps +=
        [ "drivers_interface_display:libdisplay_commontype_proxy_1.0" ]
  }
}

## Build RSUifirstManagerTest
ohos_unittest("RSUifirstManagerTest") {
  module_out_path = module_output_path
  sources = [
    "$graphic_2d_root/rosen/modules/render_service_base/src/pipeline/rs_canvas_render_node.cpp",
    "uifirst/rs_uifirst_manager_test.cpp",
  ]
  deps = [ ":rs_test_common" ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
  ]
  if (defined(global_parts_info) && defined(global_parts_info.sensors_sensor)) {
    external_deps += [ "sensor:sensor_interface_native" ]
  }
}

## Build RSSubThreadManagerTest
ohos_unittest("RSSubThreadManagerTest") {
  module_out_path = module_output_path
  sources = [ "uifirst/rs_sub_thread_manager_test.cpp" ]
  deps = [ ":rs_test_common" ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
  ]
  if (defined(global_parts_info) && defined(global_parts_info.sensors_sensor)) {
    external_deps += [ "sensor:sensor_interface_native" ]
  }
  defines = []
  defines += gpu_defines
  if (defined(use_rosen_drawing) && use_rosen_drawing) {
    defines += [ "USE_ROSEN_DRAWING" ]
  }
  if (defined(use_video_processing_engine) && use_video_processing_engine) {
    include_dirs = []
    defines += [ "USE_VIDEO_PROCESSING_ENGINE" ]
    include_dirs += [ "$video_processing_engine_root/interfaces/inner_api" ]
    external_deps +=
        [ "drivers_interface_display:libdisplay_commontype_proxy_1.0" ]
  }
}

## Build RSSubThreadTest
ohos_unittest("RSSubThreadTest") {
  module_out_path = module_output_path
  sources = [
    "$graphic_2d_root/rosen/test/unittest_main/test_main.cpp",
    "uifirst/rs_sub_thread_test.cpp",
  ]
  deps = [ ":rs_test_common" ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
  ]
  if (defined(global_parts_info) && defined(global_parts_info.sensors_sensor)) {
    external_deps += [ "sensor:sensor_interface_native" ]
  }
  defines = []
  defines += gpu_defines
  if (defined(use_rosen_drawing) && use_rosen_drawing) {
    defines += [ "USE_ROSEN_DRAWING" ]
  }
  if (defined(use_video_processing_engine) && use_video_processing_engine) {
    include_dirs = []
    defines += [ "USE_VIDEO_PROCESSING_ENGINE" ]
    include_dirs += [ "$video_processing_engine_root/interfaces/inner_api" ]
    external_deps +=
        [ "drivers_interface_display:libdisplay_commontype_proxy_1.0" ]
  }
}

## Build RSUIFirstRenderListenerTest
ohos_unittest("RSUIFirstRenderListenerTest") {
  module_out_path = module_output_path
  sources = [ "uifirst/rs_ui_first_render_listener_test.cpp" ]
  deps = [ ":rs_test_common" ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
  ]
  if (defined(global_parts_info) && defined(global_parts_info.sensors_sensor)) {
    external_deps += [ "sensor:sensor_interface_native" ]
  }
  defines = []
  defines += gpu_defines
  if (defined(use_rosen_drawing) && use_rosen_drawing) {
    defines += [ "USE_ROSEN_DRAWING" ]
  }
  if (defined(use_video_processing_engine) && use_video_processing_engine) {
    include_dirs = []
    defines += [ "USE_VIDEO_PROCESSING_ENGINE" ]
    include_dirs += [ "$video_processing_engine_root/interfaces/inner_api" ]
    external_deps +=
        [ "drivers_interface_display:libdisplay_commontype_proxy_1.0" ]
  }
}

deps += [ ":RSUniHWcPrevalidateUtilTest" ]
if (rs_enable_eglimage) {
  deps += [ ":RSEglImageManagerTest" ]
}
if (graphic_2d_feature_enable_rspipeline) {
  deps += [ ":RSUifirstManagerTest" ]
}
if (rs_enable_parallel_render && rs_enable_gpu) {
  deps += [
    ":RSSubThreadManagerTest",
    ":RSSubThreadTest",
    ":RSUIFirstRenderListenerTest",
  ]
}
