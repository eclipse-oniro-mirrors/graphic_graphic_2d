diff --git a/rosen/modules/composer/vsync/include/vsync_distributor.h b/rosen/modules/composer/vsync/include/vsync_distributor.h
index a6fe1ee5f9..b3673082fc 100644
--- a/rosen/modules/composer/vsync/include/vsync_distributor.h
+++ b/rosen/modules/composer/vsync/include/vsync_distributor.h
@@ -167,6 +167,7 @@ private:
     void CollectConns(bool &waitForVSync, int64_t &timestamp,
         std::vector<sptr<VSyncConnection>> &conns, bool isDvsyncThread);
     bool PostVSyncEventPreProcess(int64_t &timestamp, std::vector<sptr<VSyncConnection>> &conns);
+    void CheckNeedDisableDvsync(int64_t now, int64_t period);
 
     sptr<VSyncSystemAbilityListener> saStatusChangeListener_ = nullptr;
     std::thread threadLoop_;
diff --git a/rosen/modules/composer/vsync/src/vsync_distributor.cpp b/rosen/modules/composer/vsync/src/vsync_distributor.cpp
index 73200d16de..98b4340bac 100644
--- a/rosen/modules/composer/vsync/src/vsync_distributor.cpp
+++ b/rosen/modules/composer/vsync/src/vsync_distributor.cpp
@@ -572,6 +572,7 @@ void VSyncDistributor::OnDVSyncTrigger(int64_t now, int64_t period, uint32_t ref
         return;
     }
 
+    // When vsync switches to dvsync, need to handle pending RNVs during vsync
     if (!IsDVsyncOn() || pendingRNVInVsync_) {
         event_.timestamp = now;
         event_.vsyncCount++;
@@ -588,17 +589,7 @@ void VSyncDistributor::OnDVSyncTrigger(int64_t now, int64_t period, uint32_t ref
     if (dvsync_->WaitCond() || pendingRNVInVsync_) {
         con_.notify_all();
     } else {
-        // When Dvsync on, if the RequestNextVsync is not invoked within three period and SetVSyncRate
-        // is not invoked either, execute DisableVSync.
-        for (uint32_t i = 0; i < connections_.size(); i++) {
-            if (connections_[i]->triggerThisTime_ || connections_[i]->rate_ >= 0) {
-                return;
-            }
-        }
-        if (now - dvsync_->GetLastRnvTS() > 3 * period) {  // 3 period
-            ScopedBytrace func(name_ + "_DisableVsync");
-            DisableVSync();
-        }
+        CheckNeedDisableDvsync(now, period);
     }
 }
 #endif
@@ -697,6 +688,26 @@ int32_t VSyncDistributor::GetUIDVsyncPid()
 }
 #endif
 
+void VSyncDistributor::CheckNeedDisableDvsync(int64_t now, int64_t period)
+{
+#if defined(RS_ENABLE_DVSYNC)
+    if (!isRs_ && IsDVsyncOn()) {
+        return;
+    }
+    // When Dvsync on, if the RequestNextVsync is not invoked within three period and SetVSyncRate
+    // is not invoked either, execute DisableVSync.
+    for (uint32_t i = 0; i < connections_.size(); i++) {
+        if (connections_[i]->triggerThisTime_ || connections_[i]->rate_ >= 0) {
+            return;
+        }
+    }
+    if (now - dvsync_->GetLastRnvTS() > 3 * period) {  // 3 period
+        ScopedBytrace func(name_ + "_DisableVsync");
+        DisableVSync();
+    }
+#endif
+}
+
 /* std::pair<id, refresh rate> */
 void VSyncDistributor::OnConnsRefreshRateChanged(const std::vector<std::pair<uint64_t, uint32_t>> &refreshRates)
 {
